{
  "paragraphs": [
    {
      "user": "anonymous",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/text"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1598184408178_1686441161",
      "id": "paragraph_1598184408178_1686441161",
      "dateCreated": "2020-08-23T12:06:48+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:536",
      "text": "%spark.conf\n\nPYSPARK_PYTHON       python2\nspark.pyspark.python python2\n\nspark.driver.cores       2\nspark.driver.memory     20g\n\nspark.executor.cores     4\nspark.executor.memory    4g\nspark.executor.instances 4\n\nspark.kubernetes.executor.volumes.persistentVolumeClaim.gaia-dr2.mount.path        /gaia/gaia-dr2\nspark.kubernetes.executor.volumes.persistentVolumeClaim.gaia-dr2.mount.readOnly    false\nspark.kubernetes.executor.volumes.persistentVolumeClaim.gaia-dr2.options.claimName gaia-dr2-volume-claim\n",
      "dateUpdated": "2020-08-23T12:07:03+0000"
    },
    {
      "text": "%spark.pyspark\ngs_df = sqlContext.read.parquet(\n    \"/gaia/gaia-dr2/gaia-dr2-full\"\n    )\n\n# following https://spark.apache.org/docs/latest/sql-data-sources-parquet.html\ngs_df.createOrReplaceTempView(\"gaia_source\")\nsql_df = spark.sql(\"SELECT floor(source_id / 562949953421312) AS hpx5, COUNT(*) AS n, AVG(pmra) AS avgPmRa, AVG(pmdec) AS avgPmDec FROM gaia_source GROUP BY hpx5\")\nprint (sql_df.take(10))\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-23T12:08:09+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "//4040-spark-vimrzd.local.zeppelin-project.org:8080/jobs/job?id=12",
              "$$hashKey": "object:869"
            },
            {
              "jobUrl": "//4040-spark-vimrzd.local.zeppelin-project.org:8080/jobs/job?id=13",
              "$$hashKey": "object:870"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1598184423147_1731040032",
      "id": "paragraph_1598184423147_1731040032",
      "dateCreated": "2020-08-23T12:07:03+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:685",
      "dateFinished": "2020-08-23T12:09:13+0000",
      "dateStarted": "2020-08-23T12:08:09+0000",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Row(hpx5=7225, n=862172, avgPmRa=-1.415192720407031, avgPmDec=-3.1944690137506973), Row(hpx5=10422, n=772169, avgPmRa=-6.471648041093023, avgPmDec=-2.2199168268053695), Row(hpx5=7279, n=659016, avgPmRa=-0.966345103624316, avgPmDec=-2.917773304906999), Row(hpx5=11938, n=664701, avgPmRa=-1.5526806119479626, avgPmDec=-4.930975643874072), Row(hpx5=9458, n=331544, avgPmRa=-3.8978927471767015, avgPmDec=4.103168987995878), Row(hpx5=11945, n=760730, avgPmRa=-1.5273094833174716, avgPmDec=-4.852319709306381), Row(hpx5=3506, n=334360, avgPmRa=-2.5376126457270605, avgPmDec=-3.3529256026569914), Row(hpx5=10156, n=209941, avgPmRa=-1.9310596541604814, avgPmDec=1.25496701338796), Row(hpx5=9945, n=328850, avgPmRa=-1.8786368515968297, avgPmDec=2.5052444207598237), Row(hpx5=9978, n=269702, avgPmRa=-1.042869517250241, avgPmDec=1.8470884156270655)]\n"
          }
        ]
      }
    },
    {
      "text": "%spark.pyspark\n# plot up the sky counts\n#import matplotlib.pyplot as plt\nimport numpy as np\nimport healpy as hp\n\n# healpy constants\nNSIDE = 32\nNPIX = hp.nside2npix(NSIDE)\n\n# do the visualisation\narray_data = np.empty(NPIX)\nfor item in sql_df.rdd.collect():  array_data[item[0]] = item[2]\n#array_data = np.array(sql_df.select('hpx5', 'avgPmRa').collect()) ... or somesuch more efficient (elegant, pythonic, vectorized) way of creating the required input for HEALPy?!\nhp.mollview(array_data, nest=True, title='Mean RA proper motion at HEALPix level 5', cmap='rainbow')\nhp.graticule(coord='E', color='white')\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-23T12:09:36+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1598184489457_1117628719",
      "id": "paragraph_1598184489457_1117628719",
      "dateCreated": "2020-08-23T12:08:09+0000",
      "status": "ERROR",
      "focus": true,
      "$$hashKey": "object:773",
      "dateFinished": "2020-08-23T12:09:36+0000",
      "dateStarted": "2020-08-23T12:09:36+0000",
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Fail to execute line 3: import numpy as np\nTraceback (most recent call last):\n  File \"/tmp/1598183941801-0/zeppelin_python.py\", line 153, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 3, in <module>\nImportError: No module named numpy\n"
          }
        ]
      }
    },
    {
      "text": "%spark.pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-23T12:09:36+0000",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1598184576452_1110436153",
      "id": "paragraph_1598184576452_1110436153",
      "dateCreated": "2020-08-23T12:09:36+0000",
      "status": "READY",
      "focus": true,
      "$$hashKey": "object:899"
    }
  ],
  "name": "Untitled Note 3",
  "id": "2FKD4GT6Q",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Untitled Note 3"
}