#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    Exploring the Zeppelin code base.

    How Zeppelin runs a Paragraph (2016)
    https://medium.com/apache-zeppelin-stories/how-apache-zeppelin-runs-a-paragraph-783a0a612ba9

    How are Notes and Paragraphs executed.

    Where can we add a hook to check if <user> has the resources to execute a Paragraph.

    In a k8s deployment, all the interpreters are launched in separate Pods.

    The isolation level is set for each interpreter.
    In a shared interpreter all the Notes share the same Pod.
    In an isolated interpreter all the Notes get a separate Pod for each Interpreter.

    The Spark Interpreter contains the Spark driver, which manages a chain of Spark workers.

    The iterable set of Interpreters are created together because PySpark depends on Pythion etc ..

    We want to apply a lifetime to a Spark Interpreter based on the identity of the user who invoked it.

    A Paragraph has

        Interpreter
        AuthenticationInfo

        public Interpreter getBindedInterpreter() {..}

        public boolean execute(boolean blocking) {
            ....
            interpreter.getScheduler().submit(this);
            ....
            }

        protected InterpreterResult jobRun() {
            ....
            ....
              if (this.user != null) {
                if (subject != null && !interpreterSetting.isUserAuthorized(subject.getUsersAndRoles())) {
                  String msg = String.format("%s has no permission for %s", subject.getUser(), intpText);
                  LOGGER.error(msg);
                  return new InterpreterResult(Code.ERROR, msg);
                }
              }
            >> here <<
            ....
            ....
            InterpreterResult ret = null;
            if (shouldInjectCredentials) {
              UserCredentials creds = context.getAuthenticationInfo().getUserCredentials();
              CredentialInjector credinjector = new CredentialInjector(creds);
              String code = credinjector.replaceCredentials(script);
              ret = interpreter.interpret(code, context);
              ret = credinjector.hidePasswords(ret);
            } else {
              ret = interpreter.interpret(script, context);
            }
            ....
            ....
            }

    Paragraph permissions grant access to roles
    https://zeppelin.apache.org/docs/0.8.0/usage/rest_api/notebook.html#get-a-note-permission-information

        readers
        owners
        runners
        writers


    Basic auth settings
    https://docs.cloudera.com/HDPDocuments/HDP3/HDP-3.1.4/configuring-zeppelin-security/content/enable_access_control_for_zeppelin_elements.html


    Apply a lease to an interpreter.
    InterpreterLease
        interpreter
        user
        start
        end
        isActive()
            call out to external source
            is <user> allowed access to <interpreter>
        limits()
            set of limits for properties
            worker count
            worker size
            etc ..

        Is <user> allowed to use <this> interpreter ?
            yes/no based on interpreter group name

        Is <user> allowed to create a new interpreter ?
            yes/no based on interpreter group name

        Is <user> allowed to use <these> properties
            Applies defaults and limits based on list
                PropertyLimit
                    validate()
                IntegerProperty
                    default
                    max
                    min
                StringProperty
                    default
                    regex
                    list

            zeppelin.k8s.interpreter.cores
            zeppelin.k8s.interpreter.memory
            etc ..


        Data model :

            interpreter-lease
                user
                group [spark, python ...]
                access [yes/no]
                create [yes/no]
                limits
                    property-limit
                        default
                        regex
                        list
                        min
                        max

        JSON data store
            load from files

        JSON web service
            load from GET URLs

        JDBC data store
            read from JDBC tables/views










