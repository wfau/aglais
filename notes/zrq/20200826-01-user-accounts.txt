#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Continue from previous notes
    notes/zrq/20200825-01-oauth-proxy.txt

    Add multi-user support to Zeppelin
    Add oauth-proxy in front of Zeppelin


# -----------------------------------------------------
# Copy the interpreter-spec from Zeppelin code into our own code base.
#[user@desktop]

    source "${HOME}/aglais.env"

    mkdir -p "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/interpreter"

    cp "${ZEPPELIN_CODE:?}/k8s/interpreter/100-interpreter-spec.yaml" \
       "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/interpreter"


# -----------------------------------------------------
# Copy the shiro.ini template from into our own code base.
#[user@desktop]

    source "${HOME}/aglais.env"

    mkdir -p "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/conf"

    cp "${ZEPPELIN_CODE:?}/conf/shiro.ini.template" \
       "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/conf/shiro.ini"

# -----------------------------------------------------
# Hard code some random passwords.
#[user@desktop]

    pushd "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/conf"

        sed -i '
            s/^user1.*$/user1 = '$(pwgen 20 1)'/
            s/^user2.*$/user2 = '$(pwgen 20 1)'/
            s/^user3.*$/user3 = '$(pwgen 20 1)'/
            ' shiro.ini

    popd


# -----------------------------------------------------
# Build a new zeppelin-mod image.
#[user@desktop]

    builddir=$(mktemp -d)

    buildsrc=2020.07.27
    buildtag=$(date '+%Y.%m.%d')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    buildah bud \
        --format docker \
        --tag aglais/zeppelin-mod:latest \
        --tag aglais/zeppelin-mod:${buildtag:?} \
        --build-arg "buildsrc=${buildsrc:?}" \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE}/experiments/zrq/zeppelin/docker/Dockermod" \
        "${AGLAIS_CODE:?}/experiments/zrq/zeppelin"


    >   STEP 1: FROM aglais/zeppelin:2020.07.27
    >   STEP 2: MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
    >   ....
    >   ....
    >   Copying config 938411584a done
    >   Writing manifest to image destination
    >   Storing signatures


# -----------------------------------------------------
# Login to the Docker Hub.
#[user@desktop]

    podman login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass) \
        registry-1.docker.io

    >   Login Succeeded!

# -----------------------------------------------------
# Push our modified image to Docker Hub.
#[user@desktop]

    podman push "aglais/zeppelin-mod:${buildtag:?}"

    >   ....
    >   ....
    >   Copying blob 14c72cc22bee skipped: already exists
    >   Copying blob 0529d56c9f58 skipped: already exists
    >   Copying blob 7a3b4a3e80b4 [--------------------------------------] 0.0b / 0.0b
    >   Copying config 938411584a [--------------------------------------] 0.0b / 18.1KiB
    >   Writing manifest to image destination
    >   Storing signatures


    podman push "aglais/zeppelin-mod:latest"

    >   ....
    >   ....
    >   Copying blob ae181b191dad skipped: already exists
    >   Copying blob 0529d56c9f58 skipped: already exists
    >   Copying blob 7a3b4a3e80b4 [--------------------------------------] 0.0b / 0.0b
    >   Copying config 938411584a [--------------------------------------] 0.0b / 18.1KiB
    >   Writing manifest to image destination
    >   Storing signatures


# -----------------------------------------------------
# Copy the Zeppelin deployment template into our own code base.
#[user@desktop]

    source "${HOME}/aglais.env"

    cp "${ZEPPELIN_CODE:?}/k8s/zeppelin-server.yaml" \
       "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s"


# -----------------------------------------------------
# Edit our copy of the Zeppelin deployment template.
#[user@desktop]

    gedit "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/zeppelin-server.yaml"

        ....
        ....

    diff "${ZEPPELIN_CODE:?}/k8s/zeppelin-server.yaml" \
         "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/zeppelin-server.yaml"

    >   31,32c31,32
    >   <   ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE: spark:2.4.5
    >   <   ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin:0.9.0-SNAPSHOT
    >   ---
    >   >   ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE: pyspark-mod:2020.08.11
    >   >   ZEPPELIN_K8S_CONTAINER_IMAGE: aglais/zeppelin-mod:2020.08.26
    >   118c118
    >   <         image: apache/zeppelin:0.9.0-SNAPSHOT
    >   ---
    >   >         image: aglais/zeppelin-mod:2020.08.26


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --hostname kubenator \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --env "clustername=${CLUSTER_NAME:?}" \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/zeppelin:/zeppelin:z" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/kubernetes:/kubernetes:z" \
        atolmis/openstack-client \
        bash


# -----------------------------------------------------
# Get the connection details for our cluster.
#[user@zepplinator]

    mkdir -p "${HOME}/.kube"
    openstack \
        --os-cloud "${cloudname:?}" \
        coe cluster config \
            "${clustername:?}" \
                --force \
                --dir "${HOME}/.kube"

    kubectl \
        cluster-info

    >   Kubernetes master is running at https://....
    >   Heapster is running at https://....
    >   CoreDNS is running at https://....


# -----------------------------------------------------
# Update our Zeppelin deployment.
#[root@kubenator]

    kubectl apply \
        --filename \
            "/zeppelin/k8s/zeppelin-server.yaml"

    >   configmap/zeppelin-server-conf-map created
    >   configmap/zeppelin-server-conf created
    >   deployment.apps/zeppelin-server created
    >   service/zeppelin-server created
    >   serviceaccount/zeppelin-server unchanged
    >   role.rbac.authorization.k8s.io/zeppelin-server-role unchanged
    >   rolebinding.rbac.authorization.k8s.io/zeppelin-server-role-binding unchanged


# -----------------------------------------------------
# Expose Zeppelin with a LoadBalancer.
#[root@kubenator]

    # TODO Use the OAuth proxy to protect it

    cat > "/tmp/zeppelin-loadbalancer.yaml" << EOF
---
kind: Service
apiVersion: v1
metadata:
  name: zeppelin-loadbalancer
spec:
  ports:
    - name: http
      port: 80
  selector:
    app.kubernetes.io/name: zeppelin-server
  type: LoadBalancer
EOF

    kubectl apply \
        --filename \
            "/tmp/zeppelin-loadbalancer.yaml"

    >   service/zeppelin-loadbalancer created


# -----------------------------------------------------
# Watch the LoadBalancer to get the external address.
#[root@kubenator]

    watch \
        kubectl \
            get service \
                "zeppelin-loadbalancer"

    >   NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
    >   zeppelin-loadbalancer   LoadBalancer   10.254.209.218   <pending>     80:30078/TCP   14m


    #
    # Load balancer fails to get external address.
    # No debug information available.
    #


    kubectl \
        describe service \
            "zeppelin-loadbalancer"

    >   Name:                     zeppelin-loadbalancer
    >   Namespace:                default
    >   Labels:                   <none>
    >   Annotations:              kubectl.kubernetes.io/last-applied-configuration:
    >                               {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"zeppelin-loadbalancer","namespace":"default"},"spec":{"ports":[{"...
    >   Selector:                 app.kubernetes.io/name=zeppelin-server
    >   Type:                     LoadBalancer
    >   IP:                       10.254.209.218
    >   Port:                     http  80/TCP
    >   TargetPort:               80/TCP
    >   NodePort:                 http  30078/TCP
    >   Endpoints:                10.100.6.87:80
    >   Session Affinity:         None
    >   External Traffic Policy:  Cluster
    >   Events:                   <none>

    #
    # Describe shows no events, not even a create event !?
    #

# -----------------------------------------------------
# Check the selector gets the right pods.
#[root@kubenator]

    kubectl \
        get pod \
            --selector 'app.kubernetes.io/name=zeppelin-server'

    >   NAME                              READY   STATUS    RESTARTS   AGE
    >   zeppelin-server-674bd8b57-nrtb6   3/3     Running   0          25m

    #
    # Again - this was supposed to be the easy part !
    # No clues as to _why_ the LoadBalancer doesn't connect to the Pod.
    # It could be something wrong with the config inside the K8s cluster
    #    ... Pod selector seems OK
    # It could be something wrong with the config outside the K8s cluster.
    #    ... we have a spare Openstack floating IP address

    # Two things on the TODO list for today#
    # Test out user accounts in Zeppelin
    #   See how they effect the allocation of interpreter nodes
    # Delete the Openstack cluster and re-create with half the resources.
    #   Hand over half the resources for Stelios to work with.
    #
    # The LoadBalancer config was an interim step anyway.
    # Plan was to connect the OAuth proxy to the Zeppelin service.
    # However, that won't work at the moment - because the user names won't match.
    #   We configured Zeppelin with use1, user2 etc ...
    #   The OAath proxy is going to return a GMail address ..
    #

    #
    # Try using the OAath proxy anyway.
    #

# -----------------------------------------------------
# Delete the LoadBalancer.
#[root@kubenator]

    kubectl \
        delete service \
            "zeppelin-loadbalancer"

    >   service "zeppelin-loadbalancer" deleted


# -----------------------------------------------------
# Edit the oauth-protected Ingress.
#[root@kubenator]

    kubectl \
        get ingress \
            "oauth-protected"

    >   NAME              HOSTS                 ADDRESS           PORTS     AGE
    >   oauth-protected   vernon.metagrid.xyz   128.232.227.191   80, 443   41h

    kubectl \
        get ingress \
            --output json \
            "oauth-protected"

    >   {
    >       "apiVersion": "extensions/v1beta1",
    >       "kind": "Ingress",
    >       "metadata": {
    >           "annotations": {
    >               "kubectl.kubernetes.io/last-applied-configuration": "{....}",
    >               "nginx.ingress.kubernetes.io/auth-response-headers": "x-auth-request-user, x-auth-request-email",
    >               "nginx.ingress.kubernetes.io/auth-signin": "https://$host/agromulupt/start?rd=$escaped_request_uri",
    >               "nginx.ingress.kubernetes.io/auth-url": "https://$host/agromulupt/auth"
    >           },
    >           "creationTimestamp": "2020-08-25T10:48:00Z",
    >           "generation": 8,
    >           "name": "oauth-protected",
    >           "namespace": "default",
    >           "resourceVersion": "3652357",
    >           "selfLink": "/apis/extensions/v1beta1/namespaces/default/ingresses/oauth-protected",
    >           "uid": "a6103d5d-4d38-422f-afe8-8bc66e476a9d"
    >       },
    >       "spec": {
    >           "rules": [
    >               {
    >                   "host": "vernon.metagrid.xyz",
    >                   "http": {
    >                       "paths": [
    >                           {
    >                               "backend": {
    >                                   "serviceName": "http-svc",
    >                                   "servicePort": 80
    >                               },
    >                               "path": "/"
    >                           }
    >                       ]
    >                   }
    >               }
    >           ],
    >           "tls": [
    >               {
    >                   "hosts": [
    >                       "vernon.metagrid.xyz"
    >                   ],
    >                   "secretName": "tls-secret"
    >               }
    >           ]
    >       },
    >       "status": {
    >           "loadBalancer": {
    >               "ingress": [
    >                   {
    >                       "ip": "128.232.227.191"
    >                   }
    >               ]
    >           }
    >       }
    >   }


    kubectl \
        edit ingress \
            "oauth-protected"

    >   ....
    >       rules:
    >       - host: vernon.metagrid.xyz
    >         http:
    >           paths:
    >           - backend:
    >               serviceName: http-svc
    >               servicePort: 80
    >   -         path: /
    >   +         path: /frog
    >   ....

    >   ingress.extensions/oauth-protected edited


# -----------------------------------------------------
# Test the URLs with Firefox
#[user@desktop]

    firefox "https://vernon.metagrid.xyz/frog" &

    >   HTTP/2 200 OK
    >   server: nginx/1.19.1
    >   date: Thu, 27 Aug 2020 04:44:20 GMT
    >   content-type: text/plain
    >   ....

    firefox "https://vernon.metagrid.xyz/" &

    >   HTTP/2 404 Not Found
    >   server: nginx/1.19.1
    >   date: Thu, 27 Aug 2020 04:45:25 GMT
    >   content-type: text/html
    >   ....

# -----------------------------------------------------
# Edit the oauth-protected Ingress to point to our Zeppelin service.
#[root@kubenator]

    kubectl \
        edit ingress \
            "oauth-protected"

    >   ....
    >       rules:
    >       - host: vernon.metagrid.xyz
    >         http:
    >           paths:
    >           - backend:
    >               serviceName: http-svc
    >               servicePort: 80
    >             path: /frog
    >   +       - backend:
    >   +           serviceName: zeppelin-server
    >   +           servicePort: 80
    >   +         path: /
    >   ....

    >   ingress.extensions/oauth-protected edited


# -----------------------------------------------------
# Test the URL with Firefox
#[user@desktop]

    firefox "https://vernon.metagrid.xyz/" &

    >   HTTP/2 200 OK
    >   server: nginx/1.19.1
    >   date: Thu, 27 Aug 2020 04:49:19 GMT
    >   content-type: text/html
    >   ....

    #
    # We get the Zeppelin front page.
    # Need to login to do anything.
    #

    #
    # Login using one of the hard coded user accounts.
    # user1 = ....
    #

    #
    # OK - we are logged in.
    # We can create a new Notebook.
    # We can't edit the interpreter settings.
    # Running a PySpark note fails.
    # org.apache.zeppelin.interpreter.InterpreterException: java.io.IOException: Interpreter process is not running
    #


# -----------------------------------------------------
# See if we can edit the user account settings.
#[root@kubenator]

    kubectl \
        get pod \
            --selector 'app.kubernetes.io/name=zeppelin-server'

    >   NAME                              READY   STATUS    RESTARTS   AGE
    >   zeppelin-server-674bd8b57-nrtb6   3/3     Running   0          103m

    podname=$(
        kubectl \
            get pod \
                --selector 'app.kubernetes.io/name=zeppelin-server' \
                --output json \
        | jq -r '.items[0].metadata.name'
        )

    kubectl exec \
        --tty \
        --stdin \
        "${podname}" \
            --container zeppelin-server \
            -- \
                '/bin/bash'

        sed -i '
            /^user2/{
                s/\(^.*$\)/\1, admin/
                }
            ' conf/shiro.ini

        #
        # We can edit the config file, but we can't restart the service.
        # If we delete and create a new Pod, we will loose the edits.
        # Hard coded user accounts suck.
        #




# -----------------------------------------------------
# Edit our user accounts.
#[user@desktop]

    # Save the user ID returned in the HTTP header by our OAuth proxy
	#    x-auth-request-email=xxxx@gmail.com
	#    x-auth-request-user=xxxx

    oauthid=$(secret google.amdar.ident)

    pushd "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/conf"

        sed -i '
            s/^user1.*$/user1 = '$(pwgen 20 1)'/
            s/^user2.*$/user2 = '$(pwgen 20 1)', role2/
            s/^user3.*$/user3 = '$(pwgen 20 1)', admin/
            /^user3/ a\
'${oauthid:?}' = '$(pwgen 20 1)', role2
            ' shiro.ini

    popd


# -----------------------------------------------------
# Build a new zeppelin-mod image.
#[user@desktop]

    builddir=$(mktemp -d)

    buildsrc=2020.07.27
    buildtag=$(date '+%Y.%m.%d.%H.%M.%S')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    buildah bud \
        --format docker \
        --tag aglais/zeppelin-mod:latest \
        --tag aglais/zeppelin-mod:${buildtag:?} \
        --build-arg "buildsrc=${buildsrc:?}" \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE}/experiments/zrq/zeppelin/docker/Dockermod" \
        "${AGLAIS_CODE:?}/experiments/zrq/zeppelin"


    >   STEP 1: FROM aglais/zeppelin:2020.07.27
    >   STEP 2: MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
    >   ....
    >   ....
    >   STEP 9: COPY k8s/interpreter/100-interpreter-spec.yaml /zeppelin/k8s/interpreter/
    >   STEP 10: COPY conf/shiro.ini /zeppelin/conf/shiro.ini
    >   STEP 11: COMMIT aglais/zeppelin-mod:latest
    >   ....
    >   ....


# -----------------------------------------------------
# Login to the Docker Hub.
#[user@desktop]

    podman login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass) \
        registry-1.docker.io

    >   Login Succeeded!

# -----------------------------------------------------
# Push our modified image to Docker Hub.
#[user@desktop]

    podman push "aglais/zeppelin-mod:${buildtag:?}"

    >   ....
    >   ....
    >   Copying blob 14c72cc22bee skipped: already exists
    >   Copying blob 0529d56c9f58 skipped: already exists
    >   Copying blob 7a3b4a3e80b4 [--------------------------------------] 0.0b / 0.0b
    >   Copying config 938411584a [--------------------------------------] 0.0b / 18.1KiB
    >   Writing manifest to image destination
    >   Storing signatures


    podman push "aglais/zeppelin-mod:latest"

    >   ....
    >   ....
    >   Copying blob ae181b191dad skipped: already exists
    >   Copying blob 0529d56c9f58 skipped: already exists
    >   Copying blob 7a3b4a3e80b4 [--------------------------------------] 0.0b / 0.0b
    >   Copying config 938411584a [--------------------------------------] 0.0b / 18.1KiB
    >   Writing manifest to image destination
    >   Storing signatures


# -----------------------------------------------------
# Edit our copy of the Zeppelin deployment template.
#[user@desktop]

    gedit "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/zeppelin-server.yaml"

        ....
        ....

    diff "${ZEPPELIN_CODE:?}/k8s/zeppelin-server.yaml" \
         "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/zeppelin-server.yaml"

    >   31,32c31,32
    >   <   ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE: spark:2.4.5
    >   <   ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin:0.9.0-SNAPSHOT
    >   ---
    >   >   ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE: aglais/pyspark-mod:2020.08.11
    >   >   ZEPPELIN_K8S_CONTAINER_IMAGE: aglais/zeppelin-mod:2020.08.27.06.47.11
    >   118c118
    >   <         image: apache/zeppelin:0.9.0-SNAPSHOT
    >   ---
    >   >         image: aglais/zeppelin-mod:2020.08.27.06.47.11


# -----------------------------------------------------
# -----------------------------------------------------
# Update our Zeppelin deployment.
#[root@kubenator]

    kubectl apply \
        --filename \
            "/zeppelin/k8s/zeppelin-server.yaml"

    >   configmap/zeppelin-server-conf-map configured
    >   configmap/zeppelin-server-conf unchanged
    >   deployment.apps/zeppelin-server configured
    >   service/zeppelin-server unchanged
    >   serviceaccount/zeppelin-server unchanged
    >   role.rbac.authorization.k8s.io/zeppelin-server-role unchanged
    >   rolebinding.rbac.authorization.k8s.io/zeppelin-server-role-binding unchanged


# -----------------------------------------------------
# -----------------------------------------------------
# Test the URL with Firefox
#[user@desktop]

    firefox "https://vernon.metagrid.xyz/" &


    #
    # Yes - we can get per user instances of Spark interpreter, driver and executors.
    # Need to be admin to edit the default interpreter settings to get there, but that we can do later.
    #

    #
    # Next steps are to integrate OAuth Proxy with Zeppelin.

    http://zeppelin.apache.org/docs/0.9.0-preview2/setup/security/shiro_authentication.html#faq

        "Zeppelin sever is configured as form-based authentication but is behind proxy
         configured as basic-authentication for example NGINX and don't want Zeppelin-Server
         to clear authentication headers."

        "Set zeppelin.server.authorization.header.clear to false in zeppelin-site.xml"

    http://zeppelin.apache.org/docs/0.9.0-preview2/setup/security/authentication_nginx.html

        "In case of you want authenticate using NGINX and HTTP basic auth, please read this document."





