#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    From previous experiments:

    -----------
    notes/zrq/20200730-01-dashboard.txt

    A Magum cluster on the Cambridge Openstack platform comes with a built in dashboard,
    but the service account associated with it doesn't have permission to access the system metrics.

        pods is forbidden: User "system:serviceaccount:kube-system:kubernetes-dashboard"
        cannot list resource "pods" in API group "" in the namespace "default"

    My guess is that this is part of the template Magnum uses to create the cluster ?
    No mention of dashboard in the Terraform template or tfstate files.

    -----------
    notes/zrq/20200706-03-k8s-dashboard.txt

    Based on instructions from here:

        Deploy the dashboard (recomended method).
        https://github.com/kubernetes/dashboard
        https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml

        Create our dashboard-user account and role binding.
        https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md

        Add a port-forward direct to the dashboard pod.

    Done - we have a dashboard with the correct role binding and permissions.
    Login is done using secret token associated with the dashboard-user account.

    Port-forward works, but fails intermittently and has to be re-connected.

    -----------
    notes/zrq/20200728-03-dashboard.txt

    There is a Helm chat for dashboard.
    https://github.com/kubernetes/dashboard/tree/master/aio/deploy/helm-chart/kubernetes-dashboard#configuration

    Needs another experiment to find out if it also creates the user account, role binding and permissions.

    At the moment - the Helm chart seems more complicated than the direct install.
    Am I missing something here ?

    -----------
    Reading the documentation, there are lots of different, possibly conflicting, sets of instructions.

    Starting with the Kubernetes dashboard

    The recomended way
    https://github.com/kubernetes/dashboard/tree/master/aio/deploy/recommended

         Separate YAML files for

            dashboard-namespace
            dashboard-serviceaccount
            dashboard-service
            dashboard-secret
            dashboard-configmap
            dashboard-rbac
            dashboard-deployment
            scraper-service
            scraper-deployment

    A Helm chart
    https://github.com/kubernetes/dashboard/tree/master/aio/deploy/helm-chart/kubernetes-dashboard

        Includes a chart for deploying an Ingress service in front of the dashboard (default disabled).
        Includes a chart for creating the ServiceAccount, Role and RoleBinding.
        Need another couple of experiments to understand this properly.

        Some helpful documentation :

            'ingress.tls' => "Ingress TLS configuration"

        The README for the Helm chart refers to the front page of the dashboard README.

            For information about how to access, please read the kubernetes-dashboard manual
            https://github.com/kubernetes/dashboard

        Which describes how to access the dashboard using kubectl proxy

            To access Dashboard from your local workstation you must create a secure channel
            to your Kubernetes cluster. Run the following command:

                kubectl proxy

        .. and how to install using the recomended way.

            To deploy Dashboard, execute following command:

                kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml

            Which refers to one long YAML deployment file that installs multiple components
                https://github.com/kubernetes/dashboard/blob/master/aio/deploy/recommended.yaml

                Dashboard
                    Namespace
                    ServiceAccount
                    Service
                    Secret(s)
                    ConfigMap
                    Role
                    ClusterRole
                    RoleBinding
                    ClusterRoleBinding
                    Deployment
                MetricsScraper
                    Service
                    Deployment

        The README for the Helm chart also says:

            It is critical for the Kubernetes cluster to correctly setup access control
            of Kubernetes Dashboard. See this guide for details.
            https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md

        Which describes Default Dashboard privileges and Authentication methods.

            Including this bit on HTTP Authorization header
            https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/README.md#authorization-header

                To make Dashboard use authorization header you simply need to pass Authorization: Bearer <token> in every
                request to Dashboard. This can be achieved i.e. by configuring reverse proxy in front of Dashboard.

                Proxy will be responsible for authentication with identity provider and will pass generated token in
                request header to Dashboard.

        Which sounds like it might be useful for our Drupal <--> Zeppelin interaction?


    Next steps

        Deploy Dashboard with Ingress using the Helm chart.
        https://github.com/kubernetes/dashboard/tree/master/aio/deploy/helm-chart/kubernetes-dashboard
        - done

        Export the Ingress configuration to see how it works.
        See if this dashboard configuration is useable for development.
        - done

        Deploy the test HTTP service and use it to test the OAuth proxy configuration.
        notes/zrq/20200729-02-dashboard.txt
        - done





























