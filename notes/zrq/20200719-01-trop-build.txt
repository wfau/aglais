#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    #
    # Building Zeppelin on local desktop worked fine.
    # Deploying the images to Docker Hub took > 12hrs and failed.
    # Repeat the same build on a virtual machine hosted at work.
    #

# -----------------------------------------------------
# Login to one of the trop machines.
#[user@desktop]

    ssh trop04

# -----------------------------------------------------
# Create a virtual machine to work with.
#[user@desktop]

    createvm

    >   ....
    >   INFO : Node name [Wumar]
    >   INFO : Base name [fedora-30-docker-base-20190903.qcow]
    >   INFO : Base path [/var/lib/libvirt/images/base/fedora-30-docker-base-20190903.qcow]
    >   INFO : Disc name [Wumar.qcow]
    >   INFO : Disc size [16GiB]
    >   ....


# -----------------------------------------------------
# Login to the virtual machine.
#[user@desktop]

    ssh Stevedore@wumar


# -----------------------------------------------------
# Create our target directories.
#[user@wumar]

    sudo mkdir /var/local/build
    sudo mkdir /var/local/cache

    sudo chmod a+rwx /var/local/build
    sudo chmod a+rwx /var/local/cache


# -----------------------------------------------------
# Run a Java build container.
#[user@wumar]

    chcon -t svirt_sandbox_file_t "${SSH_AUTH_SOCK:?}"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname builder \
        --env "SSH_AUTH_SOCK=/tmp/ssh_auth_sock" \
        --volume '/etc/localtime:/etc/localtime:ro' \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        --volume '/var/run/docker.sock:/var/run/docker.sock' \
        "firethorn/builder:latest" \
        bash

        --volume '/var/local/cache:/var/local/cache:rw' \
        --volume '/var/local/build:/var/local/build:rw' \

# -----------------------------------------------------
# Create our secret function.
#[root@builder]

    mkdir ${HOME}/bin
    cat > ${HOME}/bin/secret << 'EOF'
ssh -n \
    'Zarquan@data.metagrid.co.uk' \
    "bin/secret '${1}'"
EOF

    chmod a+x ${HOME}/bin/secret
    export PATH=${PATH}:${HOME}/bin

    secret frog


# -----------------------------------------------------
# Configure the source code paths.
#[root@builder]

    cat > /etc/aglais.env << 'EOF'
AGLAIS_REPO='https://github.com/Zarquan/aglais.git'
AGLAIS_HOME='/var/local/build/aglais'
AGLAIS_CODE="${AGLAIS_HOME:?}/github-zrq"
AGLAIS_CLOUD=gaia-prod
AGLAIS_USER=albert

ZEPPELIN_REPO='https://github.com/Zarquan/aglais-zeppelin.git'
ZEPPELIN_HOME='/var/local/build/aglais-zeppelin'
ZEPPELIN_CODE="${ZEPPELIN_HOME:?}/github-zrq"
EOF


# -----------------------------------------------------
# Clone our project source.
#[root@builder]

    source "/etc/aglais.env"

    echo "Checking [${AGLAIS_HOME:?}]"
    if [ ! -e "${AGLAIS_HOME:?}" ]
    then
        echo "Creating [${AGLAIS_HOME:?}]"
        mkdir --parents "${AGLAIS_HOME:?}"
    fi

    echo "Checking [$(dirname ${AGLAIS_CODE:?})]"
    if [ ! -e "$(dirname ${AGLAIS_CODE:?})" ]
    then
        echo "Creating [$(dirname ${AGLAIS_CODE:?})]"
        mkdir --parents "$(dirname ${AGLAIS_CODE:?})"
    fi

    echo "Checking [${AGLAIS_CODE:?}]"
    if [ ! -e "${AGLAIS_CODE:?}" ]
    then
        echo "Creating [${AGLAIS_CODE:?}]"
        pushd "$(dirname ${AGLAIS_CODE:?})"
            git clone "${AGLAIS_REPO:?}" "$(basename ${AGLAIS_CODE:?})"
        popd
    else
        echo "Updating [${AGLAIS_CODE:?}]"
        pushd "${AGLAIS_CODE:?}"
            git pull
        popd
    fi


# -----------------------------------------------------
# Checkout our working branch.
#[root@builder]

    devbranch=20200718-zrq-kubernetes

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_CODE:?}"
        git checkout "${devbranch:?}"
    popd


# -----------------------------------------------------
# -----------------------------------------------------
# Build our base image.
#[root@builder]

    buildtag=$(date '+%Y.%m.%d')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    source "/etc/aglais.env"

    emptydir=$(mktemp -d)

    docker build \
        --tag aglais/zeppelinbase:latest \
        --tag aglais/zeppelinbase:${buildtag:?} \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/docker/Dockerbase" \
        "${emptydir:?}"


# -----------------------------------------------------
# Login to the Docker registry.
#[root@builder]

    docker login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass)

    >   ....
    >   Login Succeeded


# -----------------------------------------------------
# Push our base image to Docker hub.
#[root@builder]

    docker push "aglais/zeppelinbase:${buildtag:?}"

    >   The push refers to repository [docker.io/aglais/zeppelinbase]
    >   d956d2e3d966: Pushed
    >   49e302f5b4ad: Pushing [==============================================>    ]  1.329GB/1.426GB
    >   4253f42b6d14: Pushed
    >   49e302f5b4ad: Pushing [==============================================>    ]   1.33GB/1.426GB
    >   49e302f5b4ad: Pushed
    >   76385efa4602: Pushed
    >   377c01c3f4e3: Mounted from library/ubuntu
    >   968d3b985bf4: Mounted from library/ubuntu
    >   631dfaad8559: Mounted from library/ubuntu
    >   d908d9ad6713: Mounted from library/ubuntu
    >   2020.07.19: digest: sha256:f7e10b5378bdd435e67e65c66ece0ce2013bbb8c4840477d717a90ecc60aef24 size: 2427


    docker push "aglais/zeppelinbase:latest"

    >   The push refers to repository [docker.io/aglais/zeppelinbase]
    >   d956d2e3d966: Layer already exists
    >   49e302f5b4ad: Layer already exists
    >   4253f42b6d14: Layer already exists
    >   6ce50e5c5ee9: Layer already exists
    >   d64b820ba0c8: Layer already exists
    >   76385efa4602: Layer already exists
    >   377c01c3f4e3: Layer already exists
    >   968d3b985bf4: Layer already exists
    >   631dfaad8559: Layer already exists
    >   d908d9ad6713: Layer already exists
    >   latest: digest: sha256:f7e10b5378bdd435e67e65c66ece0ce2013bbb8c4840477d717a90ecc60aef24 size: 2427


# -----------------------------------------------------
# Delete Docker imaegs to clear space.
#[root@builder]

    #
    # Delete the VM and create a new one ..
    #


# -----------------------------------------------------
# -----------------------------------------------------
# Clone our fork of Zeppelin.
#[root@builder]

    source "/etc/aglais.env"

    echo "Checking [${ZEPPELIN_HOME:?}]"
    if [ ! -e "${ZEPPELIN_HOME:?}" ]
    then
        echo "Creating [${ZEPPELIN_HOME:?}]"
        mkdir --parents "${ZEPPELIN_HOME:?}"
    fi

    echo "Checking [$(dirname ${ZEPPELIN_CODE:?})]"
    if [ ! -e "$(dirname ${ZEPPELIN_CODE:?})" ]
    then
        echo "Creating [$(dirname ${ZEPPELIN_CODE:?})]"
        mkdir --parents "$(dirname ${ZEPPELIN_CODE:?})"
    fi

    echo "Checking [${ZEPPELIN_CODE:?}]"
    if [ ! -e "${ZEPPELIN_CODE:?}" ]
    then
        echo "Creating [${ZEPPELIN_CODE:?}]"
        pushd "$(dirname ${ZEPPELIN_CODE:?})"
            git clone "${ZEPPELIN_REPO:?}" "$(basename ${ZEPPELIN_CODE:?})"
        popd
    else
        echo "Updating [${ZEPPELIN_CODE:?}]"
        pushd "${ZEPPELIN_CODE:?}"
            git pull
        popd
    fi


    >   Creating [/var/local/build/aglais-zeppelin/github-zrq]
    >   /var/local/build/aglais-zeppelin /
    >   Cloning into 'github-zrq'...
    >   remote: Enumerating objects: 3, done.
    >   remote: Counting objects: 100% (3/3), done.
    >   remote: Compressing objects: 100% (3/3), done.
    >   remote: Total 97018 (delta 0), reused 0 (delta 0), pack-reused 97015
    >   Receiving objects: 100% (97018/97018), 86.03 MiB | 3.49 MiB/s, done.
    >   Resolving deltas: 100% (39700/39700), done.
    >   Checking out files: 100% (2592/2592), done.


# -----------------------------------------------------
# Install the bzip2 package.
#[root@builder]

    dnf install -y bzip2


# -----------------------------------------------------
# Allow write access.
#[root@builder]

    chmod -R a+rw "/var/local/build"
    chmod -R a+rw "/var/local/cache"

# -----------------------------------------------------
# Run the build as non-root user.
#[root@builder]

    adduser fred
    su fred


# -----------------------------------------------------
# Build the distribution package.
# https://zeppelin.apache.org/docs/latest/setup/basics/how_to_build.html#package
#[fred@builder]

    source "/etc/aglais.env"
    pushd "${ZEPPELIN_CODE:?}"

        mvn package -Pbuild-distr -DskipTests

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Drop back to root user.
#[root@builder]

    exit


# -----------------------------------------------------
# Clean up disc space.
#[user@builder]

    rm -rf "/var/local/cache/maven"


# -----------------------------------------------------
# Move the build results.
#[root@builder]

    source "/etc/aglais.env"

    ZEPPELIN_VERSION=0.9.0-SNAPSHOT
    ZEPPELIN_TARGET=${ZEPPELIN_CODE:?}/zeppelin-distribution/target/zeppelin-${ZEPPELIN_VERSION:?}/zeppelin-${ZEPPELIN_VERSION:?}
    ZEPPELIN_RESULT=/var/local/build/results

    echo "${ZEPPELIN_TARGET:?}"
    echo "${ZEPPELIN_RESULT:?}"

    mv "${ZEPPELIN_TARGET:?}" \
       "${ZEPPELIN_RESULT:?}"

    ls --inode "$(dirname ${ZEPPELIN_TARGET:?})"
    ls --inode "$(dirname ${ZEPPELIN_RESULT:?})"


    ls "${ZEPPELIN_RESULT:?}"


# -----------------------------------------------------
# Clean up disc space.
#[root@builder]

    rm -rf "${ZEPPELIN_CODE:?}"


# -----------------------------------------------------
# Identify references to the Docker image.
#[root@builder]

    pushd "${ZEPPELIN_RESULT:?}"

        grep -r 'apache/zeppelin:0' *

    popd

    >   conf/zeppelin-site.xml.template:  <value>apache/zeppelin:0.9.0-SNAPSHOT</value>
    >   conf/zeppelin-site.xml.template:  <value>apache/zeppelin:0.8.0</value>
    >   k8s/zeppelin-server.yaml:  ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin:0.9.0-SNAPSHOT
    >   k8s/zeppelin-server.yaml:        image: apache/zeppelin:0.9.0-SNAPSHOT


# -----------------------------------------------------
# Update references to the Docker image.
#[root@builder]

    pushd "${ZEPPELIN_RESULT:?}"

        sed -i '
            s/apache\/zeppelin:0.9.0-SNAPSHOT/aglais\/zeppelin:latest/
            ' conf/zeppelin-site.xml.template

        sed -i '
            s/apache\/zeppelin:0.9.0-SNAPSHOT/aglais\/zeppelin:latest/
            ' k8s/zeppelin-server.yaml

    popd

        #
        # TODO change these to use XML and YAML editors.
        # xmlstarlet and yaml_cli ?
        #


# -----------------------------------------------------
# Build our Docker image.
#[root@builder]

    buildtag=2020.07.19
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    source "/etc/aglais.env"

    cp "${AGLAIS_CODE}/experiments/zrq/zeppelin/docker/log4j.properties" \
       "${ZEPPELIN_RESULT:?}"

    docker build \
        --tag aglais/zeppelin:latest \
        --tag aglais/zeppelin:${buildtag:?} \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/docker/Dockerfile" \
        "${ZEPPELIN_RESULT:?}"

    >   Sending build context to Docker daemon  1.694GB
    >   Step 1/19 : ARG buildtag
    >   Step 2/19 : FROM aglais/zeppelinbase:${buildtag}
    >   2020.07.19: Pulling from aglais/zeppelinbase
    >   ....
    >   ....
    >   Step 12/19 : COPY . ${Z_HOME}/
    >   ApplyLayer exit status 1 stdout:  stderr: write /zeppelin/plugins/Launcher/DockerInterpreterLauncher/bcprov-jdk15on-1.60.jar: no space left on device



