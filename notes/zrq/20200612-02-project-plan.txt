#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    First milestone doc
    https://github.com/wfau/aglais/wiki/Project-milestone-Jun20

    Project milestones GoogleDoc
    https://docs.google.com/document/d/1hIa4hUNG4S0scVnAX3CeA9tbppbupC5SDDmciilvfCo/edit#

    Service architecture GoogleDoc
    https://docs.google.com/document/d/1D6ntim-iOWe6OvPwWSQhFqiwF7vnAdIO30pxG4BfZZ4/edit#


    'Current prototype' project
    https://github.com/wfau/aglais/projects/22

        Do we need this as a project ?
        Is there a better name ?
            .. maintenance ?

    'Fine tune Spark/Yarn configuration'
    https://github.com/wfau/aglais/issues/103

        Very useful, but needs to be linked to specific notebooks to make it reproducible.


* GAVIP portal
   * https://gavip.esac.esa.int/
   * Document the user experience from login to running a notebook.
      * Which bits are nice which bits are clunky ?
      * Can we run some of our example notebooks on this platform ?
   * Issue #

* Document the user experience in GAVIP as a template to work from
* How a user gets access (entry point)
* What resources they can book (policy)
   * Deliverable: A wiki page to address this



    Apache Livy
    https://livy.incubator.apache.org/

Does this help with what we need ?
How does this integrate with Zeppelin ?










### Reservation vs queue - need to describe how the queue would work

### Shared vs individual clusters - proposed design has both
- I think we need to look at both.
- Shared clusters for anon and beginners
- Reserved clusters for large analyses

### Roles & groups - what roles and groups do we need
### Single Zeppelin vs per user - is this different to #1
### Separate Github project per service
How we ensure the storage is separate - technical issue

