#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    #
    # Building Zeppelin on local desktop worked fine.
    # Pushing the resulting images upstream on an ADSL line takes > 12hrs and fails.
    # Repeat the same build on a virtual machine hosted on trop machines.
    # Ran out of disc space on the Fedora 30 VM.
    # Create a new Fedora 31 VM with 32G disc space.
    #
    # Try the Zeppelin build again ...
    #

# -----------------------------------------------------
# Login to one of the trop machines.
#[user@desktop]

    ssh trop04

# -----------------------------------------------------
# Create a virtual machine to work with.
#[user@desktop]

    createvm

    >   INFO : Node name [Wumar]
    >   INFO : Base name [fedora-31-docker-base-20200722.qcow]
    >   INFO : Base path [/var/lib/libvirt/images/base/fedora-31-docker-base-20200722.qcow]
    >   INFO : Disc name [Wumar.qcow]
    >   INFO : Disc size [32GiB]


# -----------------------------------------------------
# Login to the virtual machine.
#[user@desktop]

    ssh Stevedore@wumar

# -----------------------------------------------------
# Install the bzip2 package.
#[user@wumar]

    dnf install -y bzip2


# -----------------------------------------------------
# Install Docker CE.
# Encountered problems automating this as part of the VM image build.
# https://computingforgeeks.com/how-to-install-docker-on-fedora/
#[user@wumar]

    sudo dnf install \
        -y \
        dnf-plugins-core

    sudo dnf config-manager \
        --add-repo \
        https://download.docker.com/linux/fedora/docker-ce.repo

    sudo dnf install \
        -y \
        docker-ce \
        docker-ce-cli \
        containerd.io


# -----------------------------------------------------
# Start the Docker daemon.
#[user@wumar]

    sudo systemctl enable docker.service

    >   Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /usr/lib/systemd/system/docker.service.


    sudo systemctl start docker.service

    sudo systemctl status docker.service

    >   ● docker.service - Docker Application Container Engine
    >      Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)
    >      Active: active (running) since Wed 2020-07-22 13:29:42 BST; 13s ago
    >        Docs: https://docs.docker.com
    >    Main PID: 13988 (dockerd)
    >       Tasks: 12
    >      Memory: 38.3M
    >         CPU: 408ms
    >      CGroup: /system.slice/docker.service
    >              └─13988 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
    >
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.005778193+01:00" level=warning msg="Your kernel does not support cgro>
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.005795693+01:00" level=warning msg="Your kernel does not support cgro>
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.005812933+01:00" level=warning msg="Unable to find blkio cgroup in mo>
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.006323822+01:00" level=info msg="Loading containers: start."
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.489974763+01:00" level=info msg="Default bridge (docker0) is assigned>
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.772200594+01:00" level=info msg="Loading containers: done."
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.786587035+01:00" level=info msg="Docker daemon" commit=48a66213fe gra>
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.787025453+01:00" level=info msg="Daemon has completed initialization"
    >   Jul 22 13:29:42 Wumar dockerd[13988]: time="2020-07-22T13:29:42.849226120+01:00" level=info msg="API listen on /run/docker.sock"
    >   Jul 22 13:29:42 Wumar systemd[1]: Started Docker Application Container Engine.

# -----------------------------------------------------
# Fix for Docker cgroups.
# https://github.com/docker/for-linux/issues/219#issuecomment-647023454
# https://forum.linuxconfig.org/t/how-to-install-docker-on-fedora-31-linuxconfig-org/3605/3
#[user@wumar]

    sudo dnf install -y grubby

    sudo grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"

    sudo reboot


# -----------------------------------------------------
# Create our target directories.
#[user@wumar]

    sudo mkdir /var/local/build
    sudo mkdir /var/local/cache

    sudo chmod a+rwx /var/local/build
    sudo chmod a+rwx /var/local/cache


# -----------------------------------------------------
# Run a Java build container.
#[user@wumar]

    chcon -t svirt_sandbox_file_t "${SSH_AUTH_SOCK:?}"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname builder \
        --env "SSH_AUTH_SOCK=/tmp/ssh_auth_sock" \
        --volume '/etc/localtime:/etc/localtime:ro' \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        --volume '/var/run/docker.sock:/var/run/docker.sock' \
        --volume '/var/local/cache:/var/local/cache:rw' \
        --volume '/var/local/build:/var/local/build:rw' \
        "firethorn/builder:latest" \
        bash


# -----------------------------------------------------
# Create our secret function.
#[root@builder]

    mkdir ${HOME}/bin
    cat > ${HOME}/bin/secret << 'EOF'
ssh -n \
    'Zarquan@data.metagrid.co.uk' \
    "bin/secret '${1}'"
EOF

    chmod a+x ${HOME}/bin/secret
    export PATH=${PATH}:${HOME}/bin

    secret frog


# -----------------------------------------------------
# Configure the source code paths.
#[root@builder]

    cat > /etc/aglais.env << 'EOF'
AGLAIS_REPO='https://github.com/Zarquan/aglais.git'
AGLAIS_HOME='/var/local/build/aglais'
AGLAIS_CODE="${AGLAIS_HOME:?}/github-zrq"
AGLAIS_CLOUD=gaia-prod
AGLAIS_USER=albert

ZEPPELIN_REPO='https://github.com/Zarquan/aglais-zeppelin.git'
ZEPPELIN_HOME='/var/local/build/aglais-zeppelin'
ZEPPELIN_CODE="${ZEPPELIN_HOME:?}/github-zrq"
EOF


# -----------------------------------------------------
# Clone our project source.
#[root@builder]

    source "/etc/aglais.env"

    echo "Checking [${AGLAIS_HOME:?}]"
    if [ ! -e "${AGLAIS_HOME:?}" ]
    then
        echo "Creating [${AGLAIS_HOME:?}]"
        mkdir --parents "${AGLAIS_HOME:?}"
    fi

    echo "Checking [$(dirname ${AGLAIS_CODE:?})]"
    if [ ! -e "$(dirname ${AGLAIS_CODE:?})" ]
    then
        echo "Creating [$(dirname ${AGLAIS_CODE:?})]"
        mkdir --parents "$(dirname ${AGLAIS_CODE:?})"
    fi

    echo "Checking [${AGLAIS_CODE:?}]"
    if [ ! -e "${AGLAIS_CODE:?}" ]
    then
        echo "Creating [${AGLAIS_CODE:?}]"
        pushd "$(dirname ${AGLAIS_CODE:?})"
            git clone "${AGLAIS_REPO:?}" "$(basename ${AGLAIS_CODE:?})"
        popd
    else
        echo "Updating [${AGLAIS_CODE:?}]"
        pushd "${AGLAIS_CODE:?}"
            git pull
        popd
    fi


# -----------------------------------------------------
# Checkout our working branch.
#[root@builder]

    devbranch=20200718-zrq-kubernetes

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_CODE:?}"
        git checkout "${devbranch:?}"
    popd


# -----------------------------------------------------
# Build our base image.
#[root@builder]

    buildtag=$(date '+%Y.%m.%d')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    source "/etc/aglais.env"

    emptydir=$(mktemp -d)

    docker build \
        --tag aglais/zeppelinbase:latest \
        --tag aglais/zeppelinbase:${buildtag:?} \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/docker/Dockerbase" \
        "${emptydir:?}"


# -----------------------------------------------------
# Login to the Docker registry.
#[root@builder]

    docker login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass)

    >   ....
    >   Login Succeeded


# -----------------------------------------------------
# Push our base image to Docker hub.
#[root@builder]

    docker push "aglais/zeppelinbase:${buildtag:?}"

    >   The push refers to repository [docker.io/aglais/zeppelinbase]
    >   ec4ea758b372: Pushed
    >   ....
    >   ....
    >   d908d9ad6713: Layer already exists
    >   2020.07.22: digest: sha256:188d0e45adb9908b8850748c49a49241b497673a1f64a745d3595762fd09bfc0 size: 2427


    docker push "aglais/zeppelinbase:latest"

    >   The push refers to repository [docker.io/aglais/zeppelinbase]
    >   ec4ea758b372: Layer already exists
    >   ....
    >   ....
    >   d908d9ad6713: Layer already exists
    >   latest: digest: sha256:188d0e45adb9908b8850748c49a49241b497673a1f64a745d3595762fd09bfc0 size: 2427


# -----------------------------------------------------
# Clone our fork of Zeppelin.
#[root@builder]

    source "/etc/aglais.env"

    echo "Checking [${ZEPPELIN_HOME:?}]"
    if [ ! -e "${ZEPPELIN_HOME:?}" ]
    then
        echo "Creating [${ZEPPELIN_HOME:?}]"
        mkdir --parents "${ZEPPELIN_HOME:?}"
    fi

    echo "Checking [$(dirname ${ZEPPELIN_CODE:?})]"
    if [ ! -e "$(dirname ${ZEPPELIN_CODE:?})" ]
    then
        echo "Creating [$(dirname ${ZEPPELIN_CODE:?})]"
        mkdir --parents "$(dirname ${ZEPPELIN_CODE:?})"
    fi

    echo "Checking [${ZEPPELIN_CODE:?}]"
    if [ ! -e "${ZEPPELIN_CODE:?}" ]
    then
        echo "Creating [${ZEPPELIN_CODE:?}]"
        pushd "$(dirname ${ZEPPELIN_CODE:?})"
            git clone "${ZEPPELIN_REPO:?}" "$(basename ${ZEPPELIN_CODE:?})"
        popd
    else
        echo "Updating [${ZEPPELIN_CODE:?}]"
        pushd "${ZEPPELIN_CODE:?}"
            git pull
        popd
    fi


    >   ....
    >   Cloning into 'github-zrq'...
    >   remote: Enumerating objects: 3, done.
    >   remote: Counting objects: 100% (3/3), done.
    >   remote: Compressing objects: 100% (3/3), done.
    >   remote: Total 97018 (delta 0), reused 0 (delta 0), pack-reused 97015
    >   Receiving objects: 100% (97018/97018), 86.03 MiB | 7.12 MiB/s, done.
    >   Resolving deltas: 100% (39700/39700), done.
    >   ....


# -----------------------------------------------------
# Allow write access.
#[root@builder]

    chmod -R a+rw "/var/local/build"
    chmod -R a+rw "/var/local/cache"

# -----------------------------------------------------
# Run the build as non-root user.
#[root@builder]

    adduser fred
    su fred


# -----------------------------------------------------
# Build the distribution package.
# https://zeppelin.apache.org/docs/latest/setup/basics/how_to_build.html#package
#[fred@builder]

    source "/etc/aglais.env"
    pushd "${ZEPPELIN_CODE:?}"

        mvn package -Pbuild-distr -DskipTests

    popd

    >   ....
    >   ....


# -----------------------------------------------------
# Drop back to root user.
#[root@builder]

    exit

# -----------------------------------------------------
# Identify the build results.
#[root@builder]

    source "/etc/aglais.env"

    ZEPPELIN_VERSION=0.9.0-SNAPSHOT
    ZEPPELIN_RESULT=${ZEPPELIN_CODE:?}/zeppelin-distribution/target/zeppelin-${ZEPPELIN_VERSION:?}/zeppelin-${ZEPPELIN_VERSION:?}

    ls -al "${ZEPPELIN_RESULT:?}"


    >   ....
    >   ....
    >   drwxrwxrwx. 1 fred fred      708 Jul 22 15:02 licenses
    >   drwxrwxrwx. 1 fred fred      150 Jul 22 15:02 notebook
    >   drwxrwxr-x. 1 fred fred       40 Jul 22 15:41 plugins
    >   -rw-rw-r--. 1 fred fred 29695431 Jul 22 15:40 zeppelin-web-0.9.0-SNAPSHOT.war


# -----------------------------------------------------
# Identify references to the Docker image.
#[root@builder]

    pushd "${ZEPPELIN_RESULT:?}"

        grep -r 'apache/zeppelin:0' *

    popd

    >   conf/zeppelin-site.xml.template:  <value>apache/zeppelin:0.9.0-SNAPSHOT</value>
    >   conf/zeppelin-site.xml.template:  <value>apache/zeppelin:0.8.0</value>
    >   k8s/zeppelin-server.yaml:  ZEPPELIN_K8S_CONTAINER_IMAGE: apache/zeppelin:0.9.0-SNAPSHOT
    >   k8s/zeppelin-server.yaml:        image: apache/zeppelin:0.9.0-SNAPSHOT


# -----------------------------------------------------
# Update references to the Docker image.
#[root@builder]

    pushd "${ZEPPELIN_RESULT:?}"

        sed -i '
            s/apache\/zeppelin:0.9.0-SNAPSHOT/aglais\/zeppelin:latest/
            ' conf/zeppelin-site.xml.template

        sed -i '
            s/apache\/zeppelin:0.9.0-SNAPSHOT/aglais\/zeppelin:latest/
            ' k8s/zeppelin-server.yaml

    popd

        #
        # TODO change these to use XML and YAML editors.
        # xmlstarlet and yaml_cli ?
        #


# -----------------------------------------------------
# Build our Docker image.
#[root@builder]

    buildtag=$(date '+%Y.%m.%d')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    source "/etc/aglais.env"

    cp "${AGLAIS_CODE}/experiments/zrq/zeppelin/docker/log4j.properties" \
       "${ZEPPELIN_RESULT:?}"

    docker build \
        --tag aglais/zeppelin:latest \
        --tag aglais/zeppelin:${buildtag:?} \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/docker/Dockerfile" \
        "${ZEPPELIN_RESULT:?}"

    >   Sending build context to Docker daemon  1.694GB
    >   Step 1/19 : ARG buildtag
    >   Step 2/19 : FROM aglais/zeppelinbase:${buildtag}
    >    ---> c911192c7a52
    >   ....
    >   ....
    >   Successfully built fb8911983d0e
    >   Successfully tagged aglais/zeppelin:latest
    >   Successfully tagged aglais/zeppelin:2020.07.22


# -----------------------------------------------------
# Check how much disc this uses.
#[root@builder]

    du -h "${ZEPPELIN_RESULT:?}"

    >   80K     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/bin
    >   72K     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/licenses
    >   80K     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/conf
    >   22M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/md
    >   11M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/jupyter
    >   92M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/r
    >   44M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/kotlin
    >   7.5M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/groovy
    >   17M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/python
    >   246M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/spark
    >   19M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/sh
    >   56M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/submarine
    >   676K    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/mongodb
    >   668K    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/angular
    >   7.4M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/livy
    >   59M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/hbase
    >   147M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/pig
    >   3.1M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/jdbc
    >   4.3M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/file
    >   8.0K    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/flink/python
    >   39M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/flink
    >   51M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/ignite
    >   4.9M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/influxdb
    >   2.4M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/kylin
    >   34M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/lens
    >   56M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/cassandra
    >   25M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/elasticsearch
    >   7.5M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/bigquery
    >   13M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/alluxio
    >   83M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/scio
    >   5.7M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/neo4j
    >   2.6M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/sap
    >   52M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/scalding
    >   960K    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/java
    >   215M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/beam
    >   12M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/hazelcastjet
    >   3.0M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/ksql
    >   15M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter/sparql
    >   1.4G    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/interpreter
    >   ....
    >   4.8M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/notebook
    >   ....
    >   105M    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/plugins
    >   ....
    >   16K     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/k8s
    >   ....
    >   69M     /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT/lib
    >   ....
    >   1.6G    /var/local/build/aglais-zeppelin/github-zrq/zeppelin-distribution/target/zeppelin-0.9.0-SNAPSHOT/zeppelin-0.9.0-SNAPSHOT


# -----------------------------------------------------
# Push our new image to Docker hub.
#[root@builder]

    docker push "aglais/zeppelin:${buildtag:?}"

    >   The push refers to repository [docker.io/aglais/zeppelin]
    >   fbdd01d7d18d: Pushed
    >   8d191b1996ca: Pushed
    >   ....
    >   ....
    >   631dfaad8559: Mounted from aglais/zeppelinbase
    >   d908d9ad6713: Mounted from aglais/zeppelinbase
    >   2020.07.22: digest: sha256:ad1f38ba3d06528f6516b5a28a41397049a1e13d86cc9caa116fa28f812d4698 size: 3059


    docker push "aglais/zeppelin:latest"

    >   The push refers to repository [docker.io/aglais/zeppelin]
    >   fbdd01d7d18d: Layer already exists
    >   8d191b1996ca: Layer already exists
    >   ....
    >   ....
    >   631dfaad8559: Layer already exists
    >   d908d9ad6713: Layer already exists
    >   latest: digest: sha256:ad1f38ba3d06528f6516b5a28a41397049a1e13d86cc9caa116fa28f812d4698 size: 3059


    #
    # Subsequent changes should use this as a base and add individual files.
    # buildtag=2020.07.22




