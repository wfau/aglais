#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Debugging issues with the Hadoop AWS S3 filesystem connector.

    Narrowed it down to two changes.

    1) There is a really nasty hack in the AWS S3 code that mangles
    the XML, trying to replace white space characters.
    There is a hard coded true/false flag that switches it on/off.

    2) The S3 protocol XML based.
    Openstack Swift is capable of replying ion several formats,
    including S3 XML, but defaults to a simple text based format.

    Adding a 'Accept: applcation/xml' header to the request sent from
    the Hadoop client tells Swift to respond with S3 compatible XML.

    Tried to using git tags to checkout the source code at the
    same version as used in the main deployment.
    Unfortunatley the Hadoop code tagged with release '3.3.0'
    doesn't build.

    AWS source code
    https://github.com/aws/aws-sdk-java
    AWS documentation
    https://aws.amazon.com/sdk-for-java/

    Openstack Swift source code
    https://opendev.org/openstack/swift/src/branch/master/swift/common/middleware/s3api

    Openstack Swift response formats
    https://docs.openstack.org/swift/latest/api/serialized-response-formats.html
    https://opendev.org/openstack/swift/src/branch/master/swift/common/middleware/listing_formats.py#L40
    https://opendev.org/openstack/swift/src/branch/master/swift/common/middleware/listing_formats.py#L57


# -----------------------------------------------------
# Checkout a copy of the Amazon source code at tag '1.11.835'.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_HOME}"

        mkdir 'external'
        pushd 'external'

            mkdir 'amazon'
            pushd 'amazon'

                git clone 'https://github.com/aws/aws-sdk-java.git'

                pushd 'aws-sdk-java'

                    git checkout 'tags/1.11.835'

                    pushd 'aws-java-sdk-s3'

                        mvn clean install
                        mvn eclipse:eclipse

                    popd
                popd
            popd
        popd
    popd

    >   Cloning into 'aws-sdk-java'...
    >   remote: Enumerating objects: 7781, done.
    >   remote: Counting objects: 100% (7781/7781), done.
    >   remote: Compressing objects: 100% (4241/4241), done.
    >   remote: Total 1264766 (delta 3970), reused 6941 (delta 3327), pack-reused 1256985
    >   Receiving objects: 100% (1264766/1264766), 1.72 GiB | 1.58 MiB/s, done.
    >   Resolving deltas: 100% (856689/856689), done.
    >   Updating files: 100% (72848/72848), done.

    >   Updating files: 100% (893/893), done.
    >   Note: switching to 'tags/1.11.835'.
    >
    >   You are in 'detached HEAD' state. You can look around, make experimental
    >   changes and commit them, and you can discard any commits you make in this
    >   state without impacting any branches by switching back to a branch.
    >   ....
    >   ....

    >   ....
    >   ....
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] BUILD SUCCESS
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] Total time: 6.978 s
    >   [INFO] Finished at: 2020-08-09T05:38:16+01:00
    >   [INFO] ------------------------------------------------------------------------


# -----------------------------------------------------
# Edit the Amazon code to disable the XML mangling.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_HOME}"
        pushd 'external'
            pushd 'amazon'
                pushd 'aws-sdk-java'
                    pushd 'aws-java-sdk-s3'

                        gedit 'src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java' &

                        -   private boolean sanitizeXmlDocument = true;
                        +   private boolean sanitizeXmlDocument = false;

                        mvn clean install

                        git diff

                    popd
                popd
            popd
        popd
    popd

    >   ....
    >   ....
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] BUILD SUCCESS
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] Total time: 6.978 s
    >   [INFO] Finished at: 2020-08-09T05:40:17+01:00
    >   [INFO] ------------------------------------------------------------------------


    >   diff --git a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java
    >   index 00a32cb8019..143278335ea 100644
    >   --- a/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java
    >   +++ b/aws-java-sdk-s3/src/main/java/com/amazonaws/services/s3/model/transform/XmlResponsesSaxParser.java
    >   @@ -107,7 +107,7 @@ public class XmlResponsesSaxParser {
    >
    >        private XMLReader xr = null;
    >
    >   -    private boolean sanitizeXmlDocument = true;
    >   +    private boolean sanitizeXmlDocument = false;
    >
    >        /**
    >         * Constructs the XML SAX parser.


# -----------------------------------------------------
# -----------------------------------------------------
# Checkout a clone of the Hadoop source code at 'release-3.3.0-RC0'.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_HOME}"

        mkdir 'external'
        pushd 'external'

            mkdir 'apache'
            pushd 'apache'

                git clone 'https://github.com/apache/hadoop.git'

                pushd 'hadoop'

                    git checkout 'tags/release-3.3.0-RC0'

                    mvn -D skipTests=true clean install
                    mvn eclipse:eclipse

                popd
            popd
        popd
    popd

    >   Cloning into 'hadoop'...
    >   remote: Enumerating objects: 124, done.
    >   remote: Counting objects: 100% (124/124), done.
    >   remote: Compressing objects: 100% (84/84), done.
    >   remote: Total 1445954 (delta 37), reused 54 (delta 26), pack-reused 1445830
    >   Receiving objects: 100% (1445954/1445954), 487.87 MiB | 1.50 MiB/s, done.
    >   Resolving deltas: 100% (726966/726966), done.
    >   Updating files: 100% (14042/14042), done.


    >   Note: switching to 'tags/release-3.3.0-RC0'.
    >
    >   You are in 'detached HEAD' state. You can look around, make experimental
    >   changes and commit them, and you can discard any commits you make in this
    >   state without impacting any branches by switching back to a branch.
    >   ....
    >   ....


    >   ....
    >   ....
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] BUILD SUCCESS
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] Total time: 13:24 min
    >   [INFO] Finished at: 2020-08-09T06:05:17+01:00
    >   [INFO] ------------------------------------------------------------------------


# -----------------------------------------------------
# Update the version of AWS toolkit in Hadoop to match our modified jar.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_HOME}"
        pushd 'external'
            pushd 'apache'
                pushd 'hadoop'

                    sed -i '
                        s|<aws-java-sdk.version>.*</aws-java-sdk.version>|<aws-java-sdk.version>1.11.835</aws-java-sdk.version>|
                        ' hadoop-project/pom.xml

                    git diff

                popd
            popd
        popd
    popd

    >   diff --git a/hadoop-project/pom.xml b/hadoop-project/pom.xml
    >   index c0775d41450..cc7ce07f412 100644
    >   --- a/hadoop-project/pom.xml
    >   +++ b/hadoop-project/pom.xml
    >   @@ -181,7 +181,7 @@
    >        <exec-maven-plugin.version>1.3.1</exec-maven-plugin.version>
    >        <make-maven-plugin.version>1.0-beta-1</make-maven-plugin.version>
    >        <surefire.fork.timeout>900</surefire.fork.timeout>
    >   -    <aws-java-sdk.version>1.11.563</aws-java-sdk.version>
    >   +    <aws-java-sdk.version>1.11.835</aws-java-sdk.version>
    >        <hsqldb.version>2.3.4</hsqldb.version>
    >        <frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
    >        <jasmine-maven-plugin.version>2.1</jasmine-maven-plugin.version>


# -----------------------------------------------------
# Edit the Hadoop code to add the Accept header.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_HOME}"
        pushd 'external'
            pushd 'apache'
                pushd 'hadoop'
                    pushd 'hadoop-tools'
                        pushd 'hadoop-aws'

                            gedit 'src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java' &

                            +   request.putCustomRequestHeader("Accept", "application/xml");

                            mvn clean install

                            git diff

                        popd
                    popd
                popd
            popd
        popd
    popd

    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] BUILD SUCCESS
    >   [INFO] ------------------------------------------------------------------------
    >   [INFO] Total time: 02:18 min
    >   [INFO] Finished at: 2020-08-09T06:28:40+01:00
    >   [INFO] ------------------------------------------------------------------------


    >   ....
    >   ....
    >   diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
    >   index 6d2b3a84ca7..91b24bef138 100644
    >   --- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
    >   +++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
    >   @@ -2633,6 +2633,7 @@ private S3ListRequest createListObjectsRequest(String key,
    >          if (overrideMaxKeys != null) {
    >            request.setMaxKeys(overrideMaxKeys);
    >          }
    >   +      request.putCustomRequestHeader("Accept", "application/xml");
    >          return S3ListRequest.v2(request);
    >        } else {
    >          ListObjectsRequest request = new ListObjectsRequest();


# -----------------------------------------------------
# Run our tests.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_CODE}"

        pushd 'experiments/zrq/java/spark-tools'

            mvn clean install
            mvn eclipse:eclipse

            mvn test

        popd
    popd


# -----------------------------------------------------
# -----------------------------------------------------

    Should we set the encoding to UTF-8 ?
    Currently encoding-type is null.

        public ListObjectsV2Result listObjectsV2(ListObjectsV2Request listObjectsV2Request)

            addParameterIfNotNull(request, "start-after", listObjectsV2Request.getStartAfter());
            addParameterIfNotNull(request, "continuation-token", listObjectsV2Request.getContinuationToken());
            addParameterIfNotNull(request, "delimiter", listObjectsV2Request.getDelimiter());
            addParameterIfNotNull(request, "max-keys", listObjectsV2Request.getMaxKeys());
            addParameterIfNotNull(request, "prefix", listObjectsV2Request.getPrefix());
            addParameterIfNotNull(request, "encoding-type", listObjectsV2Request.getEncodingType());
            request.addParameter("fetch-owner", Boolean.toString(listObjectsV2Request.isFetchOwner()));

# -----------------------------------------------------
# -----------------------------------------------------

    Directory listing implies this is an empty directory !?

        S3AFileStatus{
            path=s3a://gaia-dr2-parquet/;
            isDirectory=true;
            modification_time=0;
            access_time=0;
            owner=Zarquan;
            group=Zarquan;
            permission=rwxrwxrwx;
            isSymlink=false;
            hasAcl=false;
            isEncrypted=true;
            isErasureCoded=false
            }
        isEmptyDirectory=TRUE
        eTag=null
        versionId=null

    Key values are

        S3AFileStatus{
            path=s3a://gaia-dr2-parquet/;
            isDirectory=true;
            ...
            isEncrypted=true;
            ...
            }
        isEmptyDirectory=TRUE
        ...

# -----------------------------------------------------
# -----------------------------------------------------

    Is this right ?
    https://opendev.org/openstack/swift/src/branch/master/swift/common/middleware/s3api/controllers/bucket.py#L234
        if encoding_type == 'url':
            name = quote(name.encode('utf-8'))

# -----------------------------------------------------
# -----------------------------------------------------

    Debugging line at a time in Eclipse, managed to 'see' the XML we are getting back from Swift,
    and it doesn't match the S3 schema.

    https://docs.openstack.org/swift/latest/s3_compat.html


        Getting (Swift XML)
        https://opendev.org/openstack/swift/src/branch/master/swift/common/middleware/listing_formats.py#L57
        https://opendev.org/openstack/swift/src/branch/master/swift/common/middleware/listing_formats.py#L92

            <container>
                <object>
                    <name>
                    <hash>
                    <bytes>
                    <content_type>
                    <last_modified>

        Expecting (S3 XML)
        https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html

            <ListBucketResult>
               <IsTruncated>boolean</IsTruncated>
               <Contents>
                  <ETag>string</ETag>
                  <Key>string</Key>
                  <LastModified>timestamp</LastModified>
                  <Owner>
                     <DisplayName>string</DisplayName>
                     <ID>string</ID>
                  </Owner>
                  <Size>integer</Size>
                  <StorageClass>string</StorageClass>
               </Contents>


    Turns out Swift has two modes.
    Swift API, that can produce text, JSON and XML.

    Turns out that the Amazon code just skips things it doesn't recognise.
    So even though the XML comming back from Swift means nothing to the S3 parser,
    it just fails silently and returns an empty list.

    Need to find the selector in Swift that chooses which XML format to return.
    Possibly an different endpoint path ?


# -----------------------------------------------------
# TODO Try changing the version number for Hadoop.
#[user@desktop]

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_HOME}"

        mkdir 'external'
        pushd 'external'

            mkdir 'apache'
            pushd 'apache'

                pushd 'hadoop'

                    gedit pom.xml &

                    -   <version>3.4.0-SNAPSHOT</version>
                    +   <version>3.4.0-aglais</version>

                    -   <hadoop.version>3.4.0-SNAPSHOT</hadoop.version>
                    +   <hadoop.version>3.4.0-aglais</hadoop.version>

                    mvn -D skipTests=true clean install

                popd
            popd
        popd
    popd

    #
    # Only changes the version for the top level project.
    # All the modules below it have hard coded version number.
    # Need to change all of them.
    # Same issue with firethorn.
    # Copy the shell script from there ..
    #



