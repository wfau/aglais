#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Service architecture
    https://docs.google.com/document/d/1D6ntim-iOWe6OvPwWSQhFqiwF7vnAdIO30pxG4BfZZ4/edit#heading=h.6inqyule6vz

    Project milestones
    https://docs.google.com/document/d/1hIa4hUNG4S0scVnAX3CeA9tbppbupC5SDDmciilvfCo/edit#



        BLOB comment from Stelios
        Integrated several parts int the main text
        Commented on others below


        This is a suggestion for a rough estimate of milestones for the next 6 months.
        (The milestones creation and the dates are in progress and up for discussion)
        Ideally, I think we should end up with an iterative design, where aim towards building an MVP (Minimum Viable Product), and iteratively add functionality and improvements.
        This way we avoid the risk of missing our deadline of a working service by December, which could happen if we end up spending too much time on non-critical tasks.


        Deadline: 30 June 2020
        Milestones:
         - System Design and Milestones Report completed - yep, got that
         - Evaluate and decide on System Design questions (Shared cluster vs individual clusters / Resource Reservation vs Queueing System / Roles & Groups of users / Single Zeppelin vs Zeppelin per user)
            + Describe the questions
                + shared vs individual clusters (do you mean K8s cluster ?)
                + reservation vs queue - need to descrie the queue
                + roles & groups - not neede that yet
                + single Zeppelin vs per user
                    - interesting question

         - Review and prioritize issues & tasks to achieve minimum viable product
            + in progress, iterative, ongoing

         - Python package to access Spark REST API completed
           + yep, added to document

        Deadline: 30 July 2020
        Milestones:
         - Develop skeleton structure for each of the main services
             - Setup each as a separate Github project (?)
                + possibly
             - Configurations
                + templates already in the doc
             - External/Internal APIs
                + iterative, Agile, added as we go
             - Class structures  & Methods
                + iterative, Agile, added as we go
             - Unit tests
                + iterative, Agile, added as we go

        Deadline: August 2020
        Milestones:
         - First (alpha) version of Aglais on Kubernetes (Zeppelin/Spark)
            + Yep, added to the doc
            - Gaia DR2 stored in HDFS in Parquet format
               + also CephFS and S3

            - Manually created user accounts
                + Automated accounts added in July

            - Shared system, user sessions spawn separate Zeppelin pods

            - Deployed with a known set of python libraries, derived from existing prototype
                + Yep, that is what the tempkates are for
                + Spark and Zeppelin config done in July

         - Evaluation of running Aglais on Kubernetes Completed / Comparison with Spark on Hadoop (Yarn)
             + do you mean Spark+Yarn vs Spark+K8s ?
             + Added to questions list

         - Scripts and Configurations in place for a fully automated deployment of the above prototype
             + everything should be scripted anyway


        Deadline: September 2020
        Milestones:
         - Evaluation of Storage options Completed (Manila CephFS, NFS, Swift) for storing the data (Gaia) and for user persistent storage
            + Added performance comparison to the document

         - User Authentication and Authorisation Services in place using OAuth (Account Manager)
            + Authentication is passwd/OAuth Authorisation is access control, not the same thing
            + Hard to have a working alpha version without these
            + There is a case for this, but we need more detailed goals
            + TODO develop goals for Authentication
            + TODO develop goals for Authorisation

         - Persistent storage and separation of user directories solved
            + I think this is in the August Alpha

         - Evaluate separate Spark cluster per user functionality
            + Not sure what this means

        Deadline: October 2020
        Milestones:
         - Second (beta) version of the prototype with the decided storage option and the following features
            - OAuth based AuthN and AuthZ service in place
                + define - some already needed for AugustAlpha ?
                + TODO added to define mopre details

            - Domain name for service created
                + OK
            - HTTPS on gateway node
                + Given, would need this from day#1
                + Registered certificate for domain name added to document

            - System capable of spawning individual user clusters on request
                + how is this different to spawning a shared cluster ?
                + AugustAlpha can create clusters
            - Persistent storage of user and science (gaia) data on best storage option
                + Not sure what this involves, what specifically gets added ?

            - Separate Spark cluster per user functionality
                + Not sure what this involves, what specifically gets added ?

        Deadline: November 2020
        Milestones:
         - Enable user quotas (Storage Manager)
             + AugustAplha has fixed sizes in the template
             + What extra do we need for quotas ?
             + Define what happens if the quota exceeded ?
         - Evaluation of fault-tolerance, scalability and general limitations of existing system
             + ongoing since day #1
             + if we start looking for issues here it is too late

         - Build monitoring services & tools for the system
             + ongoing since day #1
             + if we start looking for issues here it is too late

         - User Documentation / Build Example Notebooks
             + ongoing since day #1
             + use the examples for tests


        Deadline: Early December 2020
        Deliverable:
         - Release Date for a operational multi-user Aglais (Zeppelin/Spark) service (R1)



        Stretch Goals

        The following describes features which could be added if we find that we are ahead of schedule after month x (x=September?)


        Reservation System

        Allow specific users to reserve a specific sized Spark Cluster for a given timeframe (Resource Booking)

            This is part of the core system in the System Design document.
            Here I have it as a stretch goal because I think that we can still have a service without it, knowing it may become slow if we have multiple concurrent users running jobs simultaneously.
            In other words, let's build the core parts of the service first, aiming towards a system that allows us to dynamically allocate clusters per user, but we implement the functionality for the reservation system towards the end.

            + this is not a stretch goal

            + create a documented description of the queue system to compare
            + user experience, limits, overload ... etc.

            + if the reservation system is risky, then do it at the start not the end

            + yes to creating components that can be used by either model
            + we should prototype both the reservation and queue system
            + that way we can identify the risks early on and have a chance of fixing them
            + leaving the risky part to later means they never get done


        Github integration

            Feature to allow users to connect Zeppelin to a Github repository, and a) import notebooks from repo b) commit to repo
            + integrate GitHub in the Algais pages not in Zeppelin
            + Added this as a goal in September


        Continuous Integration System for Aglais

            Setup CI System, that automatically creates an Aglais service with a given configuration, and triggers a set of Spark jobs automatically on this prototype
            Provides Pass/Fail results based on test output and performance (duration/resource usage/others?)
            + this is not a stretch goal
            + CI sections added to each milestone



