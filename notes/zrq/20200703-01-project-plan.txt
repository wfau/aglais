#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


    Service architecture
    https://docs.google.com/document/d/1D6ntim-iOWe6OvPwWSQhFqiwF7vnAdIO30pxG4BfZZ4/edit#

    Project milestones
    https://docs.google.com/document/d/1hIa4hUNG4S0scVnAX3CeA9tbppbupC5SDDmciilvfCo/edit#

    Jun20 milestone
    https://github.com/wfau/aglais/wiki/Project-milestone-Jun20



    Zeppelin components
    https://github.com/wfau/aglais/wiki/Zeppelin:-Documentation-of--components-&-options
        Done - issue closed

    LSP evaluation
    https://github.com/wfau/aglais/wiki/LSP-Evaluation
        Done - issue closed


    Create a wiki page describing the MVP
    https://github.com/wfau/aglais/issues/130
        Done - issue closed

        MVP User experience scenarios
        https://github.com/wfau/aglais/wiki/MVP:-User-Experience-Scenarios

            * Manual username & pass
            * Automated Username & Pass
            * Automated Username/Pass & OAuth

            * Registration system for Resources
              (resource booking)

            * Registration system for resources & immediate access
                - This is basiacally the same as registration system.
                - Text for registration system already contains:
                    "If the resources are available, they can just book the resources now and jump in"

            * Shared platform with a queue
                - Similar to YARN based queue for Spark jobs ?
                - Nothing about how to manage Zeppelin resources.
                - I _think_ this is just a shared Spark platform
                    - Unix user accounts
                    - YARN queue for Spark jobs
                    - Status notification for queued jobs

            * Individual (Dynamically Reserved) platforms with a queue
                - Per user cluster created on demand
                - First come first served
                - Custom queue for cluster requests
                    - "You are in position 1 of the queue."
                    - Once resources are freed by another user, the next person in a queue will be allowed to create a cluster.

                    - Creating a new Openstack cluster takes 10min
                    - Creating a new Kubernetes Pod ~1min
                    - Needs all of the same resource accounting to keep track of how much is in use by whom.

                    - Rough user experience, needs work.
                    - If I'm 3rd in the queue, should I wait online, come back later today or leave it until tomorrow ?
                    - Will the system call be back when I reach the front of the queue ?
                    - Will the system drop my slot if I don't take it up immediately ?

            -----------------------------
            -----------------------------

            - Split the parts.

                - Calendar booking system

                    - Book resources for a slot - hours or days.
                    - Login to Zeppelin any time during that period.
                    - Resources allocated based on the booking.

                - Job queue

                    - Queue for Spark jobs, inside the notebook.
                        - Custom queue UI on top of the standard YARN interface ?

                - Access queue
                    - Queue for Zeppelin access.

                        - First come first served.
                        - No time limit, use the system until done.
                        - Queue for access when busy.
                        - Notification system when you reach the head of the queue.

                - Resource sharing

                    - Shared Zeppelin environment.
                        - Zeppelin accounts for isolation.
                        - How to manage isolation.
                            - Separate Unix accounts ?

                    - Shared Spark environment.
                        - How to manage isolation.
                            - Separate Unix accounts ?

                    - Seperate Zeppelin Pod.
                        - Shared Kubernetes cluster.
                        - Shared Openstack VMs
                        - High load from one will take resources from others
                        - OutOfMemory, disc or CPU still a possibility.
                        - Account isolation handled by the Pod boundaries.
                            - No need for synchronised Unix accounts.
                            - Pod limits on cpu and memory.

                    - Separate Spark Pod.
                        - Shared Kubernetes cluster.
                        - Shared Openstack VMs
                        - High load from one will take resources from others
                        - OutOfMemory, disc or CPU still a possibility.
                        - Account isolation handled by the Pod boundaries.
                            - No need for synchronised Unix accounts.
                            - Pod limits on cpu and memory.

                    - Separate Kubernetes cluster.
                        - Power user, requires booking.
                        - Workshop group, requires booking.
                        - Available to use now if there is space.
                        - 10 min to create the cluster

                        - Separate Openstack VMs
                        - Account isolation handled by the Pod boundaries.
                            - No need for synchronised Unix accounts.
                            - Pod limits on cpu and memory.


                    * I think we need parts of all of these.

                    * MVP use cases need more detail.
                        - What the queue is for and how it is implemented ?

                    * Comments are more detailed than the wiki page they are commenting on :-(


        https://github.com/wfau/aglais/wiki/Minimum-Viable-Product-for-our--First-Release
            Fairly comprehensive description.
            The MVP is pretty close to what we had in mind for the Dec20 release .
            The areas that do differ (e.g. the queues) are not particularly well defined.



    Create a wiki page describing portal and Zeppelin interaction #143
    https://github.com/wfau/aglais/issues/143


    Expand the user experience section in the design document #139
    https://github.com/wfau/aglais/issues/139

    Complete Ansible deploy for testing (July) #141
    https://github.com/wfau/aglais/issues/141

    Create a wiki page describing the August alpha #134
    https://github.com/wfau/aglais/issues/134

    Create a wiki page describing the December release #133
    https://github.com/wfau/aglais/issues/133

    Create a wiki page describing the component services. #129
    https://github.com/wfau/aglais/issues/129

    Create a wiki page describing each of the milestones #132
    https://github.com/wfau/aglais/issues/132

        Milestone July2020
        https://github.com/wfau/aglais/wiki/Milestone-July2020

            Kubernetes
                Deployment
                Proxy
                Ingress
                LoadBalancer

            Kubernetes Zeppelin
                - 1D

            Kubernetes Spark - 2D
                Stand alone - 1D
                Launched from Zeppelin - 1D

            Ansible Zeppelin
                - 2D

            CI test infrastructure
                Manual initiation

            OAuth prototype
                Zeppelin - 2D
                Drupal - 2D

            Booking prototype
                Drupal - 2D



        Milestone August2020
        https://github.com/wfau/aglais/wiki/Milestone-August2020

            End to end
                Register
                Login
                Book resource +1hr for 2hr
                Launch Zeppelin from booking
                * this may involve manual copy/paste into command line
                    Create notebook
                    Execute Spark job

            Limited user isolation
                Some shared resources
                Some will be visible to all

            Limited file protection
                Gaps in the isolation
                Some will be read/write all

            Standard user accounts
                level 1 - basic

            Single static template
                Basic Zeppelin
                Basic Spark
                Basic Python

            Basic file system
                /data
                /temp
            Basic examples
                /examples
                    Zeppelin built-in examples
                    Gaia science examples
            Notebooks are not persisten

        Milestone September2020
        https://github.com/wfau/aglais/wiki/Milestone-September2020

            Science examples
                Create a demonstration of each case in the functional requirements

            Stress testing
                Too many users
                Too much data

            Book now shortcut

            Stop at end of booking
                Abrupt kill
                Graceful shutdown
                User wrning
                Extend booking

            Resource packages
                Small
                Medum
                Large
                ...


            Long term data storage
                User data space
                USer data quotas

            Full file system
                /data
                /temp
                /user - user data
                /home - user notebooks

        Milestone October2020
        https://github.com/wfau/aglais/wiki/Milestone-October2020

        Milestone November2020
        https://github.com/wfau/aglais/wiki/Milestone-November2020

        Milestone December2020
        https://github.com/wfau/aglais/wiki/Milestone-December2020




