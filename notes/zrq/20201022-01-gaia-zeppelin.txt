#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Continuing on from previous notes.
        20201020-02-gaia-volume.txt

    Cluster deployed with Manila-CSI static share available to mount in Pods using PV claims.


# -----------------------------------------------------
# Check the Gaia volume is mounted in the interpreter Pod template.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    gedit "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/k8s/interpreter/100-interpreter-spec.yaml"


            volumeMounts:
          {% if zeppelin.k8s.interpreter.group.name == "spark" %}
            - name: spark-home
              mountPath: /spark
    +       - name: gaia-dr2
    +         mountPath: /gaia-dr2
    +         readOnly: true
          {% endif %}
          {% if zeppelin.k8s.interpreter.group.name == "spark" %}
          initContainers:
          - name: spark-home-init
            image: {{zeppelin.k8s.spark.container.image}}
            command: ["sh", "-c", "cp -r /opt/spark/* /spark/"]
            volumeMounts:
            - name: spark-home
              mountPath: /spark
    +       - name: gaia-dr2
    +         mountPath: /gaia-dr2
    +         readOnly: true
          {% endif %}
          volumes:
          {% if zeppelin.k8s.interpreter.group.name == "spark" %}
          - name: spark-home
            emptyDir: {}
    +     - name: gaia-dr2
    +       persistentVolumeClaim:
    +         claimName: gaia-dr2-claim
          {% endif %}


# -----------------------------------------------------
# Check the lib directory exists.
# Needed because lib is on a different un-merged branch.
#[user@desktop]

    source "${HOME:?}/aglais.env"
    pushd "${AGLAIS_CODE:?}/experiments/zrq/zeppelin"

        if [ ! -d 'lib' ]
        then
            echo "Making [$(pwd)][lib]"
            mkdir 'lib'
            touch 'lib/empty'
        fi

    popd


# -----------------------------------------------------
# Update the zeppelin-mod image.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    builddir=$(mktemp -d)
    buildsrc=20200914-174101
    buildtag=$(date '+%Y%m%d-%H%M%S')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    buildah bud \
        --format docker \
        --tag aglais/zeppelin-mod:latest \
        --tag aglais/zeppelin-mod:${buildtag:?} \
        --build-arg "buildsrc=${buildsrc:?}" \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/docker/Dockermod" \
        "${AGLAIS_CODE:?}/experiments/zrq/zeppelin"

    >   STEP 1: FROM aglais/zeppelin-main:20200914-174101
    >   STEP 2: MAINTAINER Dave Morris <docker-admin@metagrid.co.uk>
    >   STEP 3: ARG buildtag
    >   STEP 4: ARG buildtime
    >   STEP 5: LABEL maintainer="Dave Morris <docker-admin@metagrid.co.uk>"
    >   STEP 6: LABEL buildtag="${buildtag}"
    >   STEP 7: LABEL buildtime="${buildtime}"
    >   STEP 8: LABEL gitrepo="https://github.com/wfau/aglais"
    >   STEP 9: COPY lib/* /zeppelin/lib
    >   STEP 10: COPY k8s/interpreter/100-interpreter-spec.yaml /zeppelin/k8s/interpreter/
    >   STEP 11: COPY conf/shiro.ini /zeppelin/conf/shiro.ini
    >   STEP 12: COMMIT aglais/zeppelin-mod:latest
    >   ....
    >   ....
    >   Storing signatures
    >   --> 4a4386b56f9
    >   4a4386b56f953a6dddad0ffacb3d43e64aa6f9f503ca19e9f8e4bda3b52ffedb


# -----------------------------------------------------
# Push the modified image to Docker hub.
#[user@desktop]

    buildah login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass) \
        registry-1.docker.io

    >   Login Succeeded!

    buildah push "aglais/zeppelin-mod:${buildtag:?}"

    >   Getting image source signatures
    >   Copying blob 41a253a417e6 skipped: already exists
    >   Copying blob 87c128261339 skipped: already exists
    >   Copying blob dcc0cc99372e skipped: already exists
    >   Copying blob e06660e80cf4 skipped: already exists
    >   Copying blob 63cdd007a752 done
    >   Copying blob bd59303cdc70 skipped: already exists
    >   Copying blob a5791c8427f1 skipped: already exists
    >   Copying config 4a4386b56f done
    >   Writing manifest to image destination
    >   Storing signatures


    buildah push "aglais/zeppelin-mod:latest"

    >   Getting image source signatures
    >   Copying blob bd59303cdc70 skipped: already exists
    >   Copying blob 41a253a417e6 skipped: already exists
    >   Copying blob e06660e80cf4 skipped: already exists
    >   Copying blob dcc0cc99372e skipped: already exists
    >   Copying blob 87c128261339 skipped: already exists
    >   Copying blob a5791c8427f1 skipped: already exists
    >   Copying blob 63cdd007a752 [--------------------------------------] 0.0b / 0.0b
    >   Copying config 4a4386b56f [--------------------------------------] 0.0b / 15.8KiB
    >   Writing manifest to image destination
    >   Storing signatures

# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --hostname kubenator \
        --env "buildtag=${buildtag:?}" \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --env "clustername=${CLUSTER_NAME:?}" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/helm:/helm:z" \
        atolmis/openstack-client \
        bash


# -----------------------------------------------------
# Get the connection details for our cluster.
#[root@kubernator]

    mkdir -p "${HOME:?}/.kube"
    openstack \
        --os-cloud "${cloudname:?}" \
        coe cluster config \
            "${clustername:?}" \
                --force \
                --dir "${HOME:?}/.kube"

    kubectl \
        cluster-info

    >   Kubernetes master is running at https://....
    >   Heapster is running at https://....
    >   CoreDNS is running at https://....


# -----------------------------------------------------
# Get our Dashboard account token.
#[root@kubenator]

    kubectl get \
        --output json \
        secret \
    | jq -r '
        .items[]
        | select(
            .metadata.name
            | startswith(
                "valeria-account"
                )
            )
        | .data.token
        | @base64d
        '

    >   ....
    >   ....


# -----------------------------------------------------
# Create our SSL keys and store them in a Kubernetes secret.
# https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#tls-certificates
#[root@kubernator]

    hostname=zeppelin.metagrid.xyz
    certname=zeppelin-tls-secret

    openssl req \
        -x509 \
        -sha256 \
        -nodes \
        -days 365 \
        -newkey rsa:2048 \
        -keyout /tmp/tls.key \
        -out    /tmp/tls.crt \
        -subj "/CN=${hostname:?}/O=Aglais"

    >   Generating a RSA private key
    >   ....................................+++++
    >   ....................................+++++
    >   writing new private key to '/tmp/tls.key'


    kubectl create secret \
        tls \
        ${certname} \
            --key  /tmp/tls.key \
            --cert /tmp/tls.crt

    >   secret/zeppelin-tls-secret created


    kubectl describe \
        Secret \
            'zeppelin-tls-secret'

    >   Name:         zeppelin-tls-secret
    >   Namespace:    default
    >   Labels:       <none>
    >   Annotations:  <none>
    >
    >   Type:  kubernetes.io/tls
    >
    >   Data
    >   ====
    >   tls.crt:  1192 bytes
    >   tls.key:  1704 bytes


# -----------------------------------------------------
# Deploy our Zeppelin Helm chart.
# https://helm.sh/docs/helm/helm_install/
#[root@kubenator]

    helm install \
        'zeppelin-server' \
        '/helm/zeppelin-server' \
            --set "zeppelin_server_image=aglais/zeppelin-mod:${buildtag:?}"

    >   NAME: zeppelin-server
    >   LAST DEPLOYED: Thu Oct 22 15:43:27 2020
    >   NAMESPACE: default
    >   STATUS: deployed
    >   REVISION: 1
    >   TEST SUITE: None
    >   NOTES:
    >   TODO - add some notes ...


## -----------------------------------------------------
# Check our Zeppelin server config.
#[root@kubenator]

    kubectl \
        get ConfigMap \
            'zeppelin-server-config' \
            --output json \
    | jq '.data'

    >   {
    >     "SERVICE_DOMAIN": "local.zeppelin-project.org:8080",
    >     "SPARK_HOME": "/spark",
    >     "SPARK_MASTER": "k8s://https://kubernetes.default.svc",
    >     "ZEPPELIN_HOME": "/zeppelin",
    >     "ZEPPELIN_K8S_CONTAINER_IMAGE": "aglais/zeppelin-mod:20201022-131728",
    >     "ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE": "aglais/pyspark-mod:latest",
    >     "ZEPPELIN_SERVER_RPC_PORTRANGE": "12320:12320"
    >   }



# -----------------------------------------------------
# Check our Zeppelin server Deployment.
#[root@kubenator]

    kubectl describe \
        Deployment \
            'zeppelin-server-deploy'

    >   Name:                   zeppelin-server-deploy
    >   Namespace:              default
    >   CreationTimestamp:      Thu, 22 Oct 2020 16:22:52 +0000
    >   Labels:                 aglais.name=zeppelin-server-zeppelin-server-deploy
    >                           app.kubernetes.io/instance=zeppelin-server
    >                           app.kubernetes.io/managed-by=Helm
    >                           app.kubernetes.io/name=zeppelin-server
    >                           app.kubernetes.io/version=0.0.1
    >                           helm.sh/chart=zeppelin-server-0.0.1
    >   Annotations:            deployment.kubernetes.io/revision: 1
    >                           meta.helm.sh/release-name: zeppelin-server
    >                           meta.helm.sh/release-namespace: default
    >   Selector:               app.kubernetes.io/name=zeppelin-server-pods
    >   Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
    >   StrategyType:           RollingUpdate
    >   MinReadySeconds:        0
    >   RollingUpdateStrategy:  25% max unavailable, 25% max surge
    >   Pod Template:
    >     Labels:           app.kubernetes.io/name=zeppelin-server-pods
    >     Service Account:  zeppelin-server-account
    >     Containers:
    >      zeppelin-server:
    >       Image:       aglais/zeppelin-mod:20201022-131728
    >       Ports:       8080/TCP, 8443/TCP, 12320/TCP
    >       Host Ports:  0/TCP, 0/TCP, 0/TCP
    >       Command:
    >         sh
    >         -c
    >         $(ZEPPELIN_HOME)/bin/zeppelin.sh
    >       Environment Variables from:
    >         zeppelin-server-config  ConfigMap  Optional: false
    >       Environment:
    >         POD_UID:    (v1:metadata.uid)
    >         POD_NAME:   (v1:metadata.name)
    >       Mounts:      <none>
    >      zeppelin-server-nginx:
    >       Image:      nginx:1.14.0
    >       Port:       <none>
    >       Host Port:  <none>
    >       Command:
    >         /bin/sh
    >         -c
    >       Args:
    >         cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf; sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf; sed -i -e "s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g" /etc/nginx/nginx.conf; cat /etc/nginx/nginx.conf; /usr/sbin/nginx
    >       Environment:
    >         SERVICE_DOMAIN:  <set to the key 'SERVICE_DOMAIN' of config map 'zeppelin-server-config'>  Optional: false
    >       Mounts:
    >         /tmp/conf from nginx-conf (rw)
    >      dnsmasq:
    >       Image:      janeczku/go-dnsmasq:release-1.0.5
    >       Port:       <none>
    >       Host Port:  <none>
    >       Args:
    >         --listen
    >         127.0.0.1:53
    >         --default-resolver
    >         --append-search-domains
    >         --hostsfile=/etc/hosts
    >         --verbose
    >       Environment:  <none>
    >       Mounts:       <none>
    >     Volumes:
    >      nginx-conf:
    >       Type:      ConfigMap (a volume populated by a ConfigMap)
    >       Name:      zeppelin-nginx-config
    >       Optional:  false
    >   Conditions:
    >     Type           Status  Reason
    >     ----           ------  ------
    >     Available      True    MinimumReplicasAvailable
    >     Progressing    True    NewReplicaSetAvailable
    >   OldReplicaSets:  <none>
    >   NewReplicaSet:   zeppelin-server-deploy-bb896dd45 (1/1 replicas created)
    >   Events:
    >     Type    Reason             Age   From                   Message
    >     ----    ------             ----  ----                   -------
    >     Normal  ScalingReplicaSet  40s   deployment-controller  Scaled up replica set zeppelin-server-deploy-bb896dd45 to 1


# -----------------------------------------------------
# Check our Zeppelin server Pods.
#[root@kubenator]

    kubectl describe \
        Pod \
        --selector 'app.kubernetes.io/name=zeppelin-server-pods'

    >   Name:           zeppelin-server-deploy-bb896dd45-k7gfm
    >   Namespace:      default
    >   Node:           tiberius-20201022-ao2uy7o3v2yz-node-1/10.0.0.87
    >   Start Time:     Thu, 22 Oct 2020 16:22:52 +0000
    >   Labels:         app.kubernetes.io/name=zeppelin-server-pods
    >                   pod-template-hash=bb896dd45
    >   Annotations:    <none>
    >   Status:         Running
    >   IP:             10.100.4.14
    >   Controlled By:  ReplicaSet/zeppelin-server-deploy-bb896dd45
    >   Containers:
    >     zeppelin-server:
    >       Container ID:  docker://8ad2c4e29d76611e054507d1c7cbee1d2d1b65fc3e6572280b1232e4d118af4f
    >       Image:         aglais/zeppelin-mod:20201022-131728
    >       Image ID:      docker-pullable://docker.io/aglais/zeppelin-mod@sha256:6160e06eed5d2416930c7ec815c367b7e34c980aa83dd410b284563160b9a9a1
    >       Ports:         8080/TCP, 8443/TCP, 12320/TCP
    >       Host Ports:    0/TCP, 0/TCP, 0/TCP
    >       Command:
    >         sh
    >         -c
    >         $(ZEPPELIN_HOME)/bin/zeppelin.sh
    >       State:          Running
    >         Started:      Thu, 22 Oct 2020 16:22:54 +0000
    >       Ready:          True
    >       Restart Count:  0
    >       Environment Variables from:
    >         zeppelin-server-config  ConfigMap  Optional: false
    >       Environment:
    >         POD_UID:    (v1:metadata.uid)
    >         POD_NAME:  zeppelin-server-deploy-bb896dd45-k7gfm (v1:metadata.name)
    >       Mounts:
    >         /var/run/secrets/kubernetes.io/serviceaccount from zeppelin-server-account-token-l56pc (ro)
    >     zeppelin-server-nginx:
    >       Container ID:  docker://73ca0868332ed272ab7a71c82dd7db1f3aa55a80201961545201823b0a81e26a
    >       Image:         nginx:1.14.0
    >       Image ID:      docker-pullable://docker.io/nginx@sha256:8b600a4d029481cc5b459f1380b30ff6cb98e27544fc02370de836e397e34030
    >       Port:          <none>
    >       Host Port:     <none>
    >       Command:
    >         /bin/sh
    >         -c
    >       Args:
    >         cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf; sed -i -e "s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g" /etc/nginx/nginx.conf; sed -i -e "s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g" /etc/nginx/nginx.conf; cat /etc/nginx/nginx.conf; /usr/sbin/nginx
    >       State:          Running
    >         Started:      Thu, 22 Oct 2020 16:22:54 +0000
    >       Ready:          True
    >       Restart Count:  0
    >       Environment:
    >         SERVICE_DOMAIN:  <set to the key 'SERVICE_DOMAIN' of config map 'zeppelin-server-config'>  Optional: false
    >       Mounts:
    >         /tmp/conf from nginx-conf (rw)
    >         /var/run/secrets/kubernetes.io/serviceaccount from zeppelin-server-account-token-l56pc (ro)
    >     dnsmasq:
    >       Container ID:  docker://df300cb81edea46d416955423b592542c23092e6c360e22bd099a813feb1765c
    >       Image:         janeczku/go-dnsmasq:release-1.0.5
    >       Image ID:      docker-pullable://docker.io/janeczku/go-dnsmasq@sha256:56119a82f973247eda467303dabe1c04034b6ee75fb2c2534f516b3bfdf14123
    >       Port:          <none>
    >       Host Port:     <none>
    >       Args:
    >         --listen
    >         127.0.0.1:53
    >         --default-resolver
    >         --append-search-domains
    >         --hostsfile=/etc/hosts
    >         --verbose
    >       State:          Running
    >         Started:      Thu, 22 Oct 2020 16:22:54 +0000
    >       Ready:          True
    >       Restart Count:  0
    >       Environment:    <none>
    >       Mounts:
    >         /var/run/secrets/kubernetes.io/serviceaccount from zeppelin-server-account-token-l56pc (ro)
    >   Conditions:
    >     Type              Status
    >     Initialized       True
    >     Ready             True
    >     ContainersReady   True
    >     PodScheduled      True
    >   Volumes:
    >     nginx-conf:
    >       Type:      ConfigMap (a volume populated by a ConfigMap)
    >       Name:      zeppelin-nginx-config
    >       Optional:  false
    >     zeppelin-server-account-token-l56pc:
    >       Type:        Secret (a volume populated by a Secret)
    >       SecretName:  zeppelin-server-account-token-l56pc
    >       Optional:    false
    >   QoS Class:       BestEffort
    >   Node-Selectors:  <none>
    >   Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
    >                    node.kubernetes.io/unreachable:NoExecute for 300s
    >   Events:
    >     Type    Reason     Age        From                                            Message
    >     ----    ------     ----       ----                                            -------
    >     Normal  Scheduled  <unknown>  default-scheduler                               Successfully assigned default/zeppelin-server-deploy-bb896dd45-k7gfm to tiberius-20201022-ao2uy7o3v2yz-node-1
    >     Normal  Pulled     56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Container image "aglais/zeppelin-mod:20201022-131728" already present on machine
    >     Normal  Created    56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Created container zeppelin-server
    >     Normal  Started    56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Started container zeppelin-server
    >     Normal  Pulled     56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Container image "nginx:1.14.0" already present on machine
    >     Normal  Created    56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Created container zeppelin-server-nginx
    >     Normal  Started    56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Started container zeppelin-server-nginx
    >     Normal  Pulled     56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Container image "janeczku/go-dnsmasq:release-1.0.5" already present on machine
    >     Normal  Created    56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Created container dnsmasq
    >     Normal  Started    56s        kubelet, tiberius-20201022-ao2uy7o3v2yz-node-1  Started container dnsmasq


# -----------------------------------------------------
# Check our Zeppelin server Service.
#[root@kubenator]

    kubectl describe \
        Service \
            'zeppelin-server-service'

    >   Name:              zeppelin-server-service
    >   Namespace:         default
    >   Labels:            aglais.name=zeppelin-server-zeppelin-server-service
    >                      app.kubernetes.io/instance=zeppelin-server
    >                      app.kubernetes.io/managed-by=Helm
    >                      app.kubernetes.io/name=zeppelin-server
    >                      app.kubernetes.io/version=0.0.1
    >                      helm.sh/chart=zeppelin-server-0.0.1
    >   Annotations:       meta.helm.sh/release-name: zeppelin-server
    >                      meta.helm.sh/release-namespace: default
    >   Selector:          app.kubernetes.io/name=zeppelin-server-pods
    >   Type:              ClusterIP
    >   IP:                10.254.237.188
    >   Port:              http  80/TCP
    >   TargetPort:        80/TCP
    >   Endpoints:         10.100.4.14:80
    >   Port:              rpc  12320/TCP
    >   TargetPort:        12320/TCP
    >   Endpoints:         10.100.4.14:12320
    >   Session Affinity:  None
    >   Events:            <none>


# -----------------------------------------------------
# Check our Zeppelin server Ingress.
#[root@kubenator]

    kubectl describe \
        Ingress \
            'zeppelin-server-ingress'

    >   Name:             zeppelin-server-ingress
    >   Namespace:        default
    >   Address:          128.232.227.242
    >   Default backend:  default-http-backend:80 (<none>)
    >   TLS:
    >     zeppelin-tls-secret terminates zeppelin.metagrid.xyz
    >   Rules:
    >     Host                   Path  Backends
    >     ----                   ----  --------
    >     zeppelin.metagrid.xyz
    >                            /   zeppelin-server-service:80 (10.100.4.14:80)
    >   Annotations:
    >     meta.helm.sh/release-namespace:               default
    >     nginx.ingress.kubernetes.io/ssl-passthrough:  false
    >     nginx.ingress.kubernetes.io/ssl-redirect:     true
    >     kubernetes.io/ingress.class:                  nginx
    >     meta.helm.sh/release-name:                    zeppelin-server
    >   Events:
    >     Type    Reason  Age    From                      Message
    >     ----    ------  ----   ----                      -------
    >     Normal  CREATE  2m15s  nginx-ingress-controller  Ingress default/zeppelin-server-ingress
    >     Normal  UPDATE  2m12s  nginx-ingress-controller  Ingress default/zeppelin-server-ingress


# -----------------------------------------------------
# -----------------------------------------------------
# Login to our Zeppelin site and test.
#[user@desktop]

    firefox --new-window "http://zeppelin.metagrid.xyz/" &


# -----------------------------------------------------
# -----------------------------------------------------

    UnknownHostException: zeppelin-server.default.svc

    >   ERROR [2020-10-22 16:40:28,110] ({Thread-2} RemoteInterpreterServer.java[run]:236) - Error while registering interpreter: RegisterInfo(host:10.100.1.18, port:12321, interpreterGroupId:md-shared_process)
    >   java.lang.RuntimeException: java.io.IOException: org.apache.zeppelin.shaded.org.apache.thrift.transport.TTransportException: java.net.UnknownHostException: zeppelin-server.default.svc
    >   	at org.apache.zeppelin.interpreter.remote.PooledRemoteClient.callRemoteFunction(PooledRemoteClient.java:100)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.callRemoteFunction(RemoteInterpreterEventClient.java:81)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.registerInterpreterProcess(RemoteInterpreterEventClient.java:89)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$1.run(RemoteInterpreterServer.java:233)
    >   	at java.lang.Thread.run(Thread.java:748)
    >   Caused by: java.io.IOException: org.apache.zeppelin.shaded.org.apache.thrift.transport.TTransportException: java.net.UnknownHostException: zeppelin-server.default.svc
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.lambda$new$0(RemoteInterpreterEventClient.java:73)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteClientFactory.create(RemoteClientFactory.java:54)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteClientFactory.create(RemoteClientFactory.java:34)
    >   	at org.apache.zeppelin.shaded.org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)
    >   	at org.apache.zeppelin.shaded.org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)
    >   	at org.apache.zeppelin.shaded.org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)
    >   	at org.apache.zeppelin.interpreter.remote.PooledRemoteClient.getClient(PooledRemoteClient.java:54)
    >   	at org.apache.zeppelin.interpreter.remote.PooledRemoteClient.callRemoteFunction(PooledRemoteClient.java:92)
    >   	... 4 more
    >   Caused by: org.apache.zeppelin.shaded.org.apache.thrift.transport.TTransportException: java.net.UnknownHostException: zeppelin-server.default.svc
    >   	at org.apache.zeppelin.shaded.org.apache.thrift.transport.TSocket.open(TSocket.java:226)
    >   	at org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient.lambda$new$0(RemoteInterpreterEventClient.java:71)
    >   	... 11 more
    >   Caused by: java.net.UnknownHostException: zeppelin-server.default.svc
    >   	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:184)
    >   	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
    >   	at java.net.Socket.connect(Socket.java:607)
    >   	at org.apache.zeppelin.shaded.org.apache.thrift.transport.TSocket.open(TSocket.java:221)
    >   	... 12 more
    >    INFO [2020-10-22 16:40:28,112] ({Shutdown-Thread} RemoteInterpreterServer.java[lambda$shutdown$0]:274) - Shutting down...
    >    INFO [2020-10-22 16:40:28,113] ({Shutdown-Thread} SchedulerFactory.java[<init>]:62) - Scheduler Thread Pool Size: 100
    >    INFO [2020-10-22 16:40:28,113] ({Shutdown-Thread} SchedulerFactory.java[destroy]:67) - Destroy all executors


    Found possible cause, the config property ZEPPELIN_K8S_SERVICE_NAME defaults to "zeppelin-server"

        zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java

        public enum ConfVars {
            ....
            ZEPPELIN_K8S_SERVICE_NAME("zeppelin.k8s.service.name", "zeppelin-server"),
            ....
            }

    After a day to find it ..
    Add a new value in our config map to set ZEPPELIN_K8S_SERVICE_NAME.
    Works :-)


# -----------------------------------------------------
# -----------------------------------------------------
# Mount the share in our Spark workers and test.
#[user@zeppelin]

    # --------------------------------

    %spark.conf

    spark.executor.instances 10

    spark.kubernetes.executor.volumes.persistentVolumeClaim.gaia-dr2.mount.path        /gaia-dr2
    spark.kubernetes.executor.volumes.persistentVolumeClaim.gaia-dr2.mount.readOnly    false
    spark.kubernetes.executor.volumes.persistentVolumeClaim.gaia-dr2.options.claimName gaia-dr2-claim

    # --------------------------------
    # Took 0 sec. Last updated by user1 at October 23 2020, 1:46:25 PM.
    # --------------------------------


    %spark.pyspark

    df = sqlContext.read.parquet(
        "/gaia-dr2/gaia-dr2-full"
        )

    print("DF count: ", df.count())
    print("DF partitions: ", df.rdd.getNumPartitions())

    # --------------------------------
    # Took 12 sec. Last updated by user1 at October 23 2020, 1:46:39 PM.
    # --------------------------------









