#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Create our cloud config file.
#[user@laptop]

    #
    # See 20200114-03-podman-volume.txt
    #

# -----------------------------------------------------
# Create a container to work with.
# Running this on laptop, with older OS (Fedora 29), so cgroupsV2 is not an issue.
#[user@laptop]

    source "${HOME}/aglais.settings"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname ansibler \
        --env SSH_AUTH_SOCK=/mnt/ssh_auth_sock \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw,z" \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/ansible:/mnt/ansible:ro,z" \
        atolmis/ansible-client:latest \
        bash


# -----------------------------------------------------
# Create our Ansible include vars file.
#[root@ansibler]

    cat > /tmp/ansible-vars.yml << EOF

buildtag:  'aglais-$(date '+%Y%m%d')'
cloudname: 'gaia-prod'

EOF


# -----------------------------------------------------
# Run our playbooks from the /mnt/ansible directory.
# Needed to pick up the 'ansible.cfg' config file.
# https://docs.ansible.com/ansible/latest/reference_appendices/config.html#the-configuration-file
#[root@ansibler]

    cd /mnt/ansible


# -----------------------------------------------------
# Create our gateway, master and worker instances.
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "combined-01.yml"

    >   ERROR! no action detected in task. This often indicates a misspelled module name, or incorrect module path.
    >   
    >   The error appears to be in '/mnt/ansible/05-config-ssh.yml': line 36, column 7, but may
    >   be elsewhere in the file depending on the exact syntax problem.


# -----------------------------------------------------
# Indivudual steps ....
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "01-create-network.yml"

    >   ....
    >   TASK [Create our internal network] ..
    >   fatal: [localhost]: FAILED! => {
    >       "changed": false,
    >       "module_stderr": "
    >           /root/.ansible/tmp/ansible-tmp-1580138301.0776541-259440345070863/AnsiballZ_os_network.py:18
    >           DeprecationWarning: the imp module is deprecated in favour of importlib;
    >             see the module's documentation for alternative uses
    >             import imp
    >           Traceback (most recent call last):
    >             File \"/root/.ansible/tmp/ansible-tmp-1580138301.0776541-259440345070863/AnsiballZ_os_network.py\",
    >             line 114, in <module>\n    _ansiballz_main()
    >             File \"/root/.ansible/tmp/ansible-tmp-1580138301.0776541-259440345070863/AnsiballZ_os_network.py\",
    >             line 106, in _ansiballz_main
    >             invoke_module(zipped_mod, temp_path, ANSIBALLZ_PARAMS)
    >             File \"/root/.ansible/tmp/ansible-tmp-1580138301.0776541-259440345070863/AnsiballZ_os_network.py\"
    >             line 49, in invoke_module
    >             imp.load_module('__main__', mod, module, MOD_DESC)
    >             File \"/usr/lib64/python3.7/imp.py\", line 234, in load_module
    >             return load_source(name, filename, file)
    >             File \"/usr/lib64/python3.7/imp.py\", line 169, in load_source
    >             module = _exec(spec, sys.modules[name])
    >             File \"<frozen importlib._bootstrap>\", line 630, in _exec
    >             File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module
    >             File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed
    >             File \"/tmp/ansible_os_network_payload_8pdeufjs/__main__.py\", line 232, in <module>
    >             File \"/tmp/ansible_os_network_payload_8pdeufjs/__main__.py\", line 214, in main
    >             TypeError: create_network() got an unexpected keyword argument 'port_security_enabled'",
    >         "module_stdout": "",
    >         "msg": "MODULE FAILURE\nSee stdout/stderr for the exact error", "rc": 1
    >         }
    >   ....

    #
    # No idea why this is failing !?
    # Using a container should isolate us from version mismatches.
    #


# -----------------------------------------------------
# The only change made to the command line was adding 'z',
# so try it without ...
#[user@laptop]

    source "${HOME}/aglais.settings"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname ansibler \
        --env SSH_AUTH_SOCK=/mnt/ssh_auth_sock \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw" \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:ro" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/ansible:/mnt/ansible:ro" \
        atolmis/ansible-client:latest \
        bash

# -----------------------------------------------------
# Indivdual steps ....
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "01-create-network.yml"

    #
    # Same error.
    #

    #
    # Delete the local cache of Docker images
    #


# -----------------------------------------------------
# Try again ...
#[user@laptop]

    source "${HOME}/aglais.settings"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname ansibler \
        --env SSH_AUTH_SOCK=/mnt/ssh_auth_sock \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw" \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:ro" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/ansible:/mnt/ansible:ro" \
        atolmis/ansible-client:latest \
        bash


# -----------------------------------------------------
# Create our Ansible include vars file.
#[root@ansibler]

    cat > /tmp/ansible-vars.yml << EOF

buildtag:  'aglais-$(date '+%Y%m%d')'
cloudname: 'gaia-prod'

EOF


# -----------------------------------------------------
# Run our playbooks from the /mnt/ansible directory.
# Needed to pick up the 'ansible.cfg' config file.
# https://docs.ansible.com/ansible/latest/reference_appendices/config.html#the-configuration-file
#[root@ansibler]

    cd /mnt/ansible


# -----------------------------------------------------
# Indivdual steps ....
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "01-create-network.yml"


    >   ....
    >   TASK [Create our internal network] ..
    >   An exception occurred during task execution. To see the full traceback, use -vvv. The error was: TypeError: create_network() got an unexpected keyword argument 'dns_domain'
    >   fatal: [localhost]: FAILED! => {
    >       "changed": false,
    >       "module_stderr": "Traceback (most recent call last):
    >           File \"/root/.ansible/tmp/ansible-tmp-1580138992.4464705-53241637453030/AnsiballZ_os_network.py\", line 102, in <module>
    >               _ansiballz_main()
    >           File \"/root/.ansible/tmp/ansible-tmp-1580138992.4464705-53241637453030/AnsiballZ_os_network.py\", line 94, in _ansiballz_main
    >               invoke_module(zipped_mod, temp_path, ANSIBALLZ_PARAMS)
    >           File \"/root/.ansible/tmp/ansible-tmp-1580138992.4464705-53241637453030/AnsiballZ_os_network.py\", line 40, in invoke_module
    >               runpy.run_module(mod_name='ansible.modules.cloud.openstack.os_network', init_globals=None, run_name='__main__', alter_sys=True)
    >           File \"/usr/lib64/python3.7/runpy.py\", line 205, in run_module
    >               return _run_module_code(code, init_globals, run_name, mod_spec)
    >           File \"/usr/lib64/python3.7/runpy.py\", line 96, in _run_module_code
    >               mod_name, mod_spec, pkg_name, script_name)
    >           File \"/usr/lib64/python3.7/runpy.py\", line 85, in _run_code
    >               exec(code, run_globals)
    >           File \"/tmp/ansible_os_network_payload__xsrvomd/ansible_os_network_payload.zip/ansible/modules/cloud/openstack/os_network.py\", line 255, in <module>
    >           File \"/tmp/ansible_os_network_payload__xsrvomd/ansible_os_network_payload.zip/ansible/modules/cloud/openstack/os_network.py\", line 237, in main
    >           TypeError: create_network() got an unexpected keyword argument 'dns_domain'",
    >       "module_stdout": "",
    >       "msg": "MODULE FAILURE\nSee stdout/stderr for the exact error", "rc": 1
    >       }
    >   ....

    #
    # Seen that error before ..
    #   TypeError: create_network() got an unexpected keyword argument 'dns_domain'"
    # Missing our patch to the os_network script.
    #


# -----------------------------------------------------
# Build our container images.
#[user@laptop]

    source "${HOME}/atolmis.settings"
    pushd "${ATOLMIS_CODE:?}"

        buildtag=$(date '+%Y.%m.%d')
        buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

        docker build \
            --build-arg "buildtag=${buildtag:?}" \
            --build-arg "buildtime=${buildtime:?}" \
            --tag atolmis/fedora:latest \
            --tag atolmis/fedora:${buildtag:?} \
            docker/fedora

        docker build \
            --build-arg "buildtag=${buildtag:?}" \
            --build-arg "buildtime=${buildtime:?}" \
            --tag atolmis/openssh-client:latest \
            --tag atolmis/openssh-client:${buildtag:?} \
            docker/openssh-client

        docker build \
            --build-arg "buildtag=${buildtag:?}" \
            --build-arg "buildtime=${buildtime:?}" \
            --tag atolmis/openstack-client:latest \
            --tag atolmis/openstack-client:${buildtag:?} \
            docker/openstack-client

        docker build \
            --build-arg "buildtag=${buildtag:?}" \
            --build-arg "buildtime=${buildtime:?}" \
            --tag atolmis/ansible-client:latest \
            --tag atolmis/ansible-client:${buildtag:?} \
            docker/ansible-client

    popd


# -----------------------------------------------------
# Try again ...
#[user@laptop]

    source "${HOME}/aglais.settings"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname ansibler \
        --env SSH_AUTH_SOCK=/mnt/ssh_auth_sock \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw" \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:ro" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/ansible:/mnt/ansible:ro" \
        atolmis/ansible-client:latest \
        bash


# -----------------------------------------------------
# Create our Ansible include vars file.
#[root@ansibler]

    cat > /tmp/ansible-vars.yml << EOF

buildtag:  'aglais-$(date '+%Y%m%d')'
cloudname: 'gaia-prod'

EOF


# -----------------------------------------------------
# Run our playbooks from the /mnt/ansible directory.
# Needed to pick up the 'ansible.cfg' config file.
# https://docs.ansible.com/ansible/latest/reference_appendices/config.html#the-configuration-file
#[root@ansibler]

    cd /mnt/ansible


# -----------------------------------------------------
# Indivdual steps ....
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "01-create-network.yml"

    >   PLAY [Create our internal network] ..
    >   
    >   TASK [Create our internal network] ..
    >   changed: [localhost]
    >   
    >   TASK [Create a subnet for our internal network] ..
    >   changed: [localhost]
    >   
    >   TASK [Create a router for our internal network] ..
    >   changed: [localhost]
    >   
    >   PLAY RECAP ..
    >   localhost                  : ok=3    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


# -----------------------------------------------------
# Create our gateway, master and worker instances.
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "combined-01.yml"

    >   PLAY [Create our internal network] ..
    >   
    >   TASK [Create our internal network] ..
    >   ok: [localhost]
    >   
    >   TASK [Create a subnet for our internal network] ..
    >   ok: [localhost]
    >   
    >   TASK [Create a router for our internal network] ..
    >   ok: [localhost]
    >   
    >   PLAY [Create our gateway node] ..
    >   
    >   TASK [Create a security group for our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule for IPv4 SSH.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule for IPv6 SSH.] ..
    >   changed: [localhost]
    >   
    >   TASK [Create our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Assign a floating IP address to our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Apply the gateway security group to our floating IP address.] ..
    >   ok: [localhost]
    >   
    >   TASK [Generate the SSH config for our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Generate the DNS records our gateway node.] ..
    >   changed: [localhost]
    >   
    >   PLAY [Check/create master nodes] ..
    >   
    >   TASK [Create a security group for our master nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule to allow ssh from our gateway.] ..
    >   changed: [localhost]
    >   
    >   TASK [Create our master nodes.] ..
    >   changed: [localhost] => (item=master01)
    >   changed: [localhost] => (item=master02)
    >   
    >   TASK [Generate the SSH config for our master nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Generate the DNS records our master nodes.] ..
    >   changed: [localhost]
    >   
    >   PLAY [Check/create worker nodes] ..
    >   
    >   TASK [Create a security group for our worker nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule to allow ssh from our gateway.] ..
    >   changed: [localhost]
    >   
    >   TASK [Create our worker nodes.] ..
    >   changed: [localhost] => (item=worker01)
    >   ....
    >   
    >   TASK [Generate the SSH config for our worker nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Generate the DNS records our worker nodes.] ..
    >   changed: [localhost]
    >   
    >   PLAY [Create our SSH config file.] ..
    >   
    >   TASK [Check our local SSH directory.] ..
    >   changed: [localhost]
    >   
    >   TASK [Discover our gateway node.] ..
    >   ok: [localhost]
    >   
    >   TASK [Generate our SSH config.] ..
    >   changed: [localhost]
    >   
    >   PLAY [localhost] ..
    >   
    >   TASK [Generate our DNS config header.] ..
    >   changed: [localhost]
    >   
    >   TASK [Assemble our DNS config file.] ..
    >   changed: [localhost]
    >   
    >   PLAY [gateway] ..
    >   
    >   TASK [Deploy our /etc/hosts file to our gateway.] ..
    >   fatal: [gateway]: UNREACHABLE! => {"changed": false, "msg": "Failed to connect to the host via ssh: Warning: Permanently added '128.232.227.129' (ECDSA) to the list of known hosts.\r\nfedora@128.232.227.129: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).", "unreachable": true}
    >   
    >   PLAY RECAP ..
    >   gateway                    : ok=0    changed=0    unreachable=1    failed=0    skipped=0    rescued=0    ignored=0
    >   localhost                  : ok=26   changed=21   unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

    #
    # Almost ....
    #

# -----------------------------------------------------
# Try the last step again ?
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "06-config-dns.yml"

    >   ....
    >   TASK [Deploy our /etc/hosts file to our gateway.] ..
    >   fatal: [gateway]: UNREACHABLE! => {"changed": false, "msg": "Failed to connect to the host via ssh: fedora@128.232.227.129: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).", "unreachable": true}
    >   ....

    #
    # Q. Where is the configuration setting that tells Ansible to use the generated config file ?
    # ~/.ssh/ansible-config
    #
    # A. Defined in the hosts.yml file:
    #   ansible_ssh_common_args: "-F {{ lookup('env','HOME') }}/.ssh/ansible-config"
    #

    #
    # Solved the issue - laptop didn't have the right key for the OpenStack system.
    #

# -----------------------------------------------------
# Try the last step again ?
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "06-config-dns.yml"

    #
    # Sequence broken becase we logged out of the container.
    # Can't re-run the config-dns because it relies on partial lists generated during create.
    # Re-run from the beginning ...
    #







# -----------------------------------------------------
# Try again ...
#[user@laptop]

    source "${HOME}/aglais.settings"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname ansibler \
        --env SSH_AUTH_SOCK=/mnt/ssh_auth_sock \
        --volume "${SSH_AUTH_SOCK}:/mnt/ssh_auth_sock:rw" \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:ro" \
        --volume "${AGLAIS_CODE:?}/experiments/zrq/ansible:/mnt/ansible:ro" \
        atolmis/ansible-client:latest \
        bash


# -----------------------------------------------------
# Create our Ansible include vars file.
#[root@ansibler]

    cat > /tmp/ansible-vars.yml << EOF

buildtag:  'aglais-$(date '+%Y%m%d')'
cloudname: 'gaia-prod'

EOF


# -----------------------------------------------------
# Run our playbooks from the /mnt/ansible directory.
# Needed to pick up the 'ansible.cfg' config file.
# https://docs.ansible.com/ansible/latest/reference_appendices/config.html#the-configuration-file
#[root@ansibler]

    cd /mnt/ansible


# -----------------------------------------------------
# Create our gateway, master and worker instances.
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "combined-01.yml"


    >   PLAY [Create our internal network] ..
    >   
    >   TASK [Create our internal network] ..
    >   changed: [localhost]
    >   
    >   TASK [Create a subnet for our internal network] ..
    >   changed: [localhost]
    >   
    >   TASK [Create a router for our internal network] ..
    >   changed: [localhost]
    >   
    >   PLAY [Create our gateway node] ..
    >   
    >   TASK [Create a security group for our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule for IPv4 SSH.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule for IPv6 SSH.] ..
    >   changed: [localhost]
    >   
    >   TASK [Create our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Assign a floating IP address to our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Apply the gateway security group to our floating IP address.] ..
    >   ok: [localhost]
    >   
    >   TASK [Generate the SSH config for our gateway node.] ..
    >   changed: [localhost]
    >   
    >   TASK [Generate the DNS records our gateway node.] ..
    >   changed: [localhost]
    >   
    >   PLAY [Check/create master nodes] ..
    >   
    >   TASK [Create a security group for our master nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule to allow ssh from our gateway.] ..
    >   changed: [localhost]
    >   
    >   TASK [Create our master nodes.] ..
    >   changed: [localhost] => (item=master01)
    >   changed: [localhost] => (item=master02)
    >   
    >   TASK [Generate the SSH config for our master nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Generate the DNS records our master nodes.] ..
    >   changed: [localhost]
    >   
    >   PLAY [Check/create worker nodes] ..
    >   
    >   TASK [Create a security group for our worker nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Add a security rule to allow ssh from our gateway.] ..
    >   changed: [localhost]
    >   
    >   TASK [Create our worker nodes.] ..
    >   changed: [localhost] => (item=worker01)
    >   ....
    >   
    >   TASK [Generate the SSH config for our worker nodes.] ..
    >   changed: [localhost]
    >   
    >   TASK [Generate the DNS records our worker nodes.] ..
    >   changed: [localhost]
    >   
    >   PLAY [Create our SSH config file.] ..
    >   
    >   TASK [Check our local SSH directory.] ..
    >   changed: [localhost]
    >   
    >   TASK [Discover our gateway node.] ..
    >   ok: [localhost]
    >   
    >   TASK [Generate our SSH config.] ..
    >   changed: [localhost]
    >   
    >   PLAY [localhost] ..
    >   
    >   TASK [Generate our DNS config header.] ..
    >   changed: [localhost]
    >   
    >   TASK [Assemble our DNS config file.] ..
    >   changed: [localhost]
    >   
    >   PLAY [gateway] ..
    >   
    >   TASK [Deploy our /etc/hosts file to our gateway.] ..
    >   changed: [gateway]
    >   
    >   PLAY [masters:workers] ..
    >   
    >   TASK [Deploy our /etc/hosts file to our internal hosts.] ..
    >   changed: [master01]
    >   ....
    >   
    >   PLAY RECAP ..
    >   gateway                    : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    >   localhost                  : ok=26   changed=24   unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    >   master01                   : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    >   ....

    #
    # Yay - eventually.
    # Issues - out of date Docker image in the Docker registry.
    # Out of date SSH key on laptop.
    # Original error message was bogus.
    #   "create_network() got an unexpected keyword argument 'port_security_enabled'"
    #


# -----------------------------------------------------
# Now we can install Java, Hadoop and Spark.
#[root@ansibler]

    ansible-playbook \
        --inventory "hosts.yml" \
        "10-install-java.yml"

    >   PLAY [Install the Java runtime.] ..
    >   
    >   TASK [Install the Java runtime] ..
    >   changed: [worker03]
    >   ....
    >   
    >   PLAY RECAP ..
    >   master01                   : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    >   ....


    ansible-playbook \
        --inventory "hosts.yml" \
        "11-install-hadoop.yml"

    >   PLAY [Install the Hadoop binaries from Apache.] ..
    >   
    >   TASK [Download and unpack the hadoop-3.2.1 tar gzip file.] ..
    >   changed: [master01]
    >   ....
    >   
    >   TASK [Create a symbolic link] ..
    >   changed: [master01]
    >   ....
    >   
    >   TASK [Add hadoop/bin to the PATH.] ..
    >   changed: [worker03]
    >   ....
    >   
    >   PLAY RECAP ..
    >   master01                   : ok=3    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    >   ....


    ansible-playbook \
        --inventory "hosts.yml" \
        "12-config-hadoop.yml"

    >   PLAY [Configure Hadoop] ..
    >   
    >   TASK [Create '/var/local/hadoop/namenode/names'] ..
    >   changed: [master02]
    >   ....
    >   
    >   TASK [Create '/var/local/hadoop/namenode/data'] ..
    >   changed: [worker03]
    >   ....
    >   
    >   TASK [Configure 'core-site.xml'] ..
    >   changed: [worker02]
    >   ....
    >   
    >   TASK [Configure 'hdfs-site.xml'] ..
    >   changed: [master01]
    >   ....
    >   
    >   TASK [Configure 'mapred-site.xml'] ..
    >   changed: [worker03]
    >   ....
    >   
    >   TASK [Configure 'yarn-site.xml'] ..
    >   changed: [worker02]
    >   ....
    >   
    >   TASK [Configure 'workers'] ..
    >   changed: [master02]
    >   ....
    >   
    >   PLAY RECAP ..
    >   master01                   : ok=7    changed=7    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    >   ....


    ansible-playbook \
        --inventory "hosts.yml" \
        "13-install-spark.yml"

    >   PLAY [Install the Spark binaries from Apache.] ..
    >   
    >   TASK [Download and unpack the spark-3.0.0-preview2 tar gzip file.] ..
    >   changed: [master01]
    >   
    >   TASK [Create a symbolic link] ..
    >   changed: [master01]
    >   
    >   TASK [Add spark/bin to the PATH.] ..
    >   changed: [master01]
    >   
    >   PLAY RECAP ..
    >   master01                   : ok=3    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0



