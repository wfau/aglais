#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2018, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-indent
#zrq-notes-ansible
#zrq-notes-osformat
#

# -----------------------------------------------------
# Get cluster details from OpenStack.
# https://github.com/cncf/k8s-conformance/tree/master/v1.11/openstack-magnum#create-kubernetes-cluster
#[user@openstacker]

    confdir=$(mktemp -d)

    openstack \
        --os-cloud gaia-prod \
        coe cluster config \
            --dir "${confdir}" \
            "${clusteruuid}"

--START--
cluster in status CREATE_IN_PROGRESS
--END--

--START--
cluster in status CREATE_IN_PROGRESS
--END--

--START--
cluster in status CREATE_IN_PROGRESS
--END--

--START--
'SHELL'
--END--


    cat "${confdir}/config"

--START--
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1C....UtLS0tLQ==
    server: https://128.232.227.124:6443
  name: Augustus
contexts:
- context:
    cluster: Augustus
    user: admin
  name: default
current-context: default
kind: Config
preferences: {}
users:
- name: admin
  user:
    client-certificate-data: LS0tLS1C....RS0tLS0t
    client-key-data: LS0tLS1C....0tLS0tCg==
--END--


# -----------------------------------------------------
# Check kubectl is configured correctly.
#[user@openstacker]

    kubectl \
        --kubeconfig "${confdir}/config" \
        config  \
            get-contexts

--START--
CURRENT   NAME      CLUSTER    AUTHINFO   NAMESPACE
*         default   Augustus   admin
--END--


# -----------------------------------------------------
# Get the cluster endpoints.
#[user@openstacker]

    kubectl \
        --kubeconfig "${confdir}/config" \
        cluster-info

--START--
Kubernetes master is running at https://128.232.227.124:6443
Heapster is running at https://128.232.227.124:6443/api/v1/namespaces/kube-system/services/heapster/proxy
CoreDNS is running at https://128.232.227.124:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
--END--


# -----------------------------------------------------
# Download the Cassandra service config.
# https://kubernetes.io/docs/tutorials/stateful-application/cassandra/#creating-a-cassandra-headless-service
#[user@openstacker]

    codedir=$(mktemp -d)
    pushd "${codedir}"

        wget 'https://k8s.io/examples/application/cassandra/cassandra-service.yaml'

    popd

--START--
....
2019-12-03 18:31:22 (3.55 MB/s) - 'cassandra-service.yaml' saved [165/165]
--END--


    cat "${codedir}/cassandra-service.yaml"

--START--
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
  - port: 9042
  selector:
    app: cassandra
--END--

# -----------------------------------------------------
# Change the names to make them distinct.
#[user@openstacker]

    sed -i '
        s/name: cassandra$/name: cassandra-service/
        s/app: cassandra$/app: cassandra-app/
        ' "${codedir}/cassandra-service.yaml"


    cat "${codedir}/cassandra-service.yaml"

--START--
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra-app
  name: cassandra-service
spec:
  clusterIP: None
  ports:
  - port: 9042
  selector:
    app: cassandra-app
--END--


# -----------------------------------------------------
# Create a Service to track the Cassandra nodes.
# https://kubernetes.io/docs/tutorials/stateful-application/cassandra/#creating-a-cassandra-headless-service
#[user@openstacker]

    kubectl \
        --kubeconfig "${confdir}/config" \
        apply \
            --filename "${codedir}/cassandra-service.yaml"


--START--
service/cassandra-service created
--END--


    kubectl \
        --kubeconfig "${confdir}/config" \
        get service \
            'cassandra-service'

--START--
NAME                TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE
cassandra-service   ClusterIP   None         <none>        9042/TCP   27s
--END--


# -----------------------------------------------------
# Download the StatefulSet service config.
# https://kubernetes.io/docs/tutorials/stateful-application/cassandra/#using-a-statefulset-to-create-a-cassandra-ring
#[user@openstacker]

    pushd "${codedir}"

        wget 'https://k8s.io/examples/application/cassandra/cassandra-statefulset.yaml'

    popd

--START--
....
2019-12-03 18:34:46 (59.0 MB/s) - 'cassandra-statefulset.yaml' saved [2593/2593]
--END--


    cat "${codedir}/cassandra-statefulset.yaml"

--START--
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 3
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
      - name: cassandra
        image: gcr.io/google-samples/cassandra:v13
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "500m"
            memory: 1Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - nodetool drain
        env:
          - name: MAX_HEAP_SIZE
            value: 512M
          - name: HEAP_NEWSIZE
            value: 100M
          - name: CASSANDRA_SEEDS
            value: "cassandra-0.cassandra.default.svc.cluster.local"
          - name: CASSANDRA_CLUSTER_NAME
            value: "K8Demo"
          - name: CASSANDRA_DC
            value: "DC1-K8Demo"
          - name: CASSANDRA_RACK
            value: "Rack1-K8Demo"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /ready-probe.sh
          initialDelaySeconds: 15
          timeoutSeconds: 5
        # These volume mounts are persistent. They are like inline claims,
        # but not exactly because the names need to match exactly one of
        # the stateful pod volumes.
        volumeMounts:
        - name: cassandra-data
          mountPath: /cassandra_data
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast
      resources:
        requests:
          storage: 1Gi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast
provisioner: k8s.io/minikube-hostpath
parameters:
  type: pd-ssd
--END--

# -----------------------------------------------------
# Change the names to make them distinct.
#[user@openstacker]










    #
    # Comment in the example ...
    # "This example uses the default provisioner for Minikube. Please update the following StatefulSet for the cloud you are working with."
    #

    #
    # Need to find the equivalent provisioner for our Magnum created K8 ...
    # Lots more to learn here ;-/
    #


CSI Cinder driver
https://github.com/kubernetes/cloud-provider-openstack/blob/master/docs/using-cinder-csi-plugin.md

