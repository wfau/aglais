#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Get the OAuth proxy Ingress to work

    External (GitHub) OAuth for Dashboard
    https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/auth/oauth-external-auth

    The example was originally designed for Dashboard.
    Ends up leaving Dashboard unprotected with no TLS.
    There is an intermediate step that uses the test HTTP service.

    Can we use this example to add OAuth proxy in front of Zeppelin ?

# -----------------------------------------------------

    This setup adds OAuth authentication and TLS protection to a standard HTTP service.
    WARNING - if you get the Ingress config wrong, your service is exposed unprotected.

# -----------------------------------------------------

    # Building on existing deployment.
    # notes/zrq/20200731-02-dashboard.txt


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --hostname kubernator \
        --publish 127.0.0.1:8443:8443 \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --env "clustername=${MAGNUM_CLUSTER:?}" \
        --env "SSH_AUTH_SOCK=/tmp/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock:z" \
        --volume '/var/run/docker.sock:/var/run/docker.sock:z' \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/kubernetes:/kubernetes:z" \
        --volume "${ZEPPELIN_CODE}:/zeppelin:z" \
        atolmis/openstack-client \
        bash


# -----------------------------------------------------
# Configure our secret function.
#[user@kubernator]

    mkdir ${HOME}/bin
    cat > ${HOME}/bin/secret << 'EOF'
ssh -n \
    'dmr@trop01.roe.ac.uk' \
    "bin/secret '${1}'"
EOF
    chmod a+x ${HOME}/bin/secret

    secret frog

    >   Green Frog


# -----------------------------------------------------
# Get the connection details for our cluster.
#[user@kubernator]

    mkdir -p "${HOME}/.kube"
    openstack \
        --os-cloud "${cloudname:?}-super" \
        coe cluster config \
            "${clustername:?}" \
                --force \
                --dir "${HOME}/.kube"


# -----------------------------------------------------
# Get a copy of the Kubernetes NGINX Ingress project.
# https://github.com/kubernetes/ingress-nginx.git
#[user@kubernator]

    dnf install -y  git

    cd ${HOME}
    git clone https://github.com/kubernetes/ingress-nginx.git

    >   Cloning into 'ingress-nginx'...
    >   remote: Enumerating objects: 9, done.
    >   remote: Counting objects: 100% (9/9), done.
    >   remote: Compressing objects: 100% (8/8), done.
    >   remote: Total 95314 (delta 0), reused 9 (delta 0), pack-reused 95305
    >   Receiving objects: 100% (95314/95314), 111.87 MiB | 1.50 MiB/s, done.
    >   Resolving deltas: 100% (53461/53461), done.

# -----------------------------------------------------
# Deploy a test HTTP service.
# https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#test-http-service
#[user@kubernator]

    pushd "${HOME}/ingress-nginx"
        pushd 'docs/examples'

            kubectl create \
                --filename http-svc.yaml

        popd
    popd

    >   deployment.apps/http-svc created
    >   service/http-svc created


# -----------------------------------------------------
# Create our SSL keys.
# https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#tls-certificates
#[user@kubernator]

    hostname=aglais-002.metagrid.xyz
    certname=tls-secret

    openssl req \
        -x509 \
        -sha256 \
        -nodes \
        -days 365 \
        -newkey rsa:2048 \
        -keyout /tmp/tls.key \
        -out    /tmp/tls.crt \
        -subj "/CN=${hostname:?}/O=Aglais"

    >   Generating a RSA private key
    >   .............................+++++
    >   ........................+++++
    >   writing new private key to '/tmp/tls.key'


    kubectl create secret \
        tls \
        ${certname} \
            --key  /tmp/tls.key \
            --cert /tmp/tls.crt

    >   secret/tls-secret created


# -----------------------------------------------------
# Deploy a TLS test Ingress
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#deployment
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#validation
#[user@kubernator]

    cat << EOF > /tmp/tls-test.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: tls-test
spec:
  tls:
    - hosts:
      - ${hostname}
      secretName: ${certname}
  rules:
    - host: ${hostname}
      http:
        paths:
        - path: /tls-test
          backend:
            # This assumes http-svc exists and routes to healthy endpoints
            serviceName: http-svc
            servicePort: 80
EOF


    kubectl create \
        --filename /tmp/tls-test.yaml

    >   ingress.networking.k8s.io/tls-test created


    kubectl describe \
        Ingress tls-test

    >   Name:             tls-test
    >   Namespace:        default
    >   Address:
    >   Default backend:  default-http-backend:80 (<none>)
    >   TLS:
    >     tls-secret terminates aglais-002.metagrid.xyz
    >   Rules:
    >     Host                     Path  Backends
    >     ----                     ----  --------
    >     aglais-002.metagrid.xyz
    >                              /tls-test   http-svc:80 (10.100.3.7:8080)
    >   Annotations:
    >   Events:
    >     Type    Reason  Age   From                      Message
    >     ----    ------  ----  ----                      -------
    >     Normal  CREATE  12s   nginx-ingress-controller  Ingress default/tls-test


    ingressip=$(
        kubectl get \
            Ingress tls-test \
                --output json \
        | jq -r '.status.loadBalancer.ingress[0].ip'
        )

    echo "Ingress [${ingressip:?}]"


    >   Ingress [128.232.227.228]


# -----------------------------------------------------
# -----------------------------------------------------
# Update our external DNS
#[user@desktop]


    aglais-002.metagrid.xyz     A       128.232.227.228


# -----------------------------------------------------
# Test our SSL keys.
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#deployment
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#validation
#[user@kubernator]


    curl --head "http://${ingressip:?}/tls-test"

    >   HTTP/1.1 404 Not Found
    >   Server: nginx/1.19.1
    >   Date: Tue, 04 Aug 2020 17:18:03 GMT
    >   Content-Type: text/html
    >   Content-Length: 153
    >   Connection: keep-alive


    curl --head "http://${hostname:?}/tls-test"

    >   HTTP/1.1 308 Permanent Redirect
    >   Server: nginx/1.19.1
    >   Date: Tue, 04 Aug 2020 17:18:25 GMT
    >   Content-Type: text/html
    >   Content-Length: 171
    >   Connection: keep-alive
    >   Location: https://aglais-002.metagrid.xyz/tls-test


    curl --head "https://${hostname:?}/tls-test"

    >   curl: (60) SSL certificate problem: self signed certificate
    >   More details here: https://curl.haxx.se/docs/sslcerts.html
    >   
    >   curl failed to verify the legitimacy of the server and therefore could not
    >   establish a secure connection to it. To learn more about this situation and
    >   how to fix it, please visit the web page mentioned above.


    curl --insecure --head "https://${hostname:?}/tls-test"

    >   HTTP/2 200
    >   server: nginx/1.19.1
    >   date: Tue, 04 Aug 2020 17:18:56 GMT
    >   content-type: text/plain
    >   vary: Accept-Encoding
    >   strict-transport-security: max-age=15724800; includeSubDomains


# -----------------------------------------------------
# Configure the oauth2_proxy Service.
#[user@kubernator]

    OAUTH2_PROXY_CLIENT_ID=$(
        secret google.amdar.id
        )
    OAUTH2_PROXY_CLIENT_SECRET=$(
        secret google.amdar.secret
        )
    OAUTH2_PROXY_COOKIE_SECRET=$(
        python -c 'import os,base64; print(base64.b64encode(os.urandom(16)).decode("ascii"))'
        )

    cat > /tmp/oauth-proxy.yaml << EOF
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
   k8s-app: oauth-proxy
 name: oauth-proxy
 namespace: default
spec:
 replicas: 1
 selector:
   matchLabels:
     k8s-app: oauth-proxy
 template:
   metadata:
     labels:
       k8s-app: oauth-proxy
   spec:
     containers:
     - args:
       - --provider=google
       - --email-domain=*
       - --http-address=0.0.0.0:4180
       - --proxy-prefix=/agromulupt
       - --set-xauthrequest=true
       env:
       - name:    OAUTH2_PROXY_CLIENT_ID
         value: ${OAUTH2_PROXY_CLIENT_ID}
       - name:    OAUTH2_PROXY_CLIENT_SECRET
         value: ${OAUTH2_PROXY_CLIENT_SECRET}
       - name:    OAUTH2_PROXY_COOKIE_SECRET
         value: ${OAUTH2_PROXY_COOKIE_SECRET}
       image: quay.io/oauth2-proxy/oauth2-proxy:latest
       imagePullPolicy: Always
       name: oauth-proxy
       ports:
       - containerPort: 4180
         protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
 labels:
   k8s-app: oauth-proxy
 name: oauth-proxy
 namespace: default
spec:
 ports:
 - name: http
   port: 4180
   protocol: TCP
   targetPort: 4180
 selector:
   k8s-app: oauth-proxy
EOF

    # Also tried these .. didn't do what we needed.
    # - args:
    #  - --ping-path==/agromulupt/ping
    #  - --pass-authorization-header=true
    #  - --pass-user-headers=true
    #  - --pass-access-token=true
    #  - --set-authorization-header=true

# -----------------------------------------------------
# Deploy the OAuth proxy.
#[user@kubernator]

    kubectl delete \
        deployment oauth-proxy

    kubectl delete \
        service oauth-proxy

    sleep 10

    kubectl create \
        --filename /tmp/oauth-proxy.yaml

    >   deployment.apps/oauth-proxy created
    >   service/oauth-proxy created


# -----------------------------------------------------
# Configure the oauth_proxy Ingress.
#[user@kubernator]

    #
    # WARNING The auth-url and auth-signin URLs contain '$' values.
    # WARNING If bash tries to fill them in, they will end up blank.
    #   https:///oauth2/auth
    #   https:///oauth2/start?rd
    # WARNING This disables the authentication, leaving the protected resource exposed.
    #

    cat > /tmp/oauth-ingress.yaml << EOF
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 annotations:
   nginx.ingress.kubernetes.io/auth-url:    "https://\$host/agromulupt/auth"
   nginx.ingress.kubernetes.io/auth-signin: "https://\$host/agromulupt/start?rd=\$escaped_request_uri"
   nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"
 name: oauth-protected
 namespace: default
spec:
 rules:
 - host: ${hostname}
   http:
     paths:
     - path: /auth-test
       backend:
         serviceName: http-svc
         servicePort: 80

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 name: oauth-protector
 namespace: default
spec:
 rules:
 - host: ${hostname}
   http:
     paths:
     - path: /agromulupt
       backend:
         serviceName: oauth-proxy
         servicePort: 4180

 tls:
 - hosts:
   - ${hostname}
   secretName: ${certname}
EOF


# -----------------------------------------------------
# Deploy the two Ingress connectors.
#[user@kubernator]

    kubectl delete \
        ingress oauth-protected

    kubectl delete \
        ingress oauth-protector

    kubectl create \
        --filename /tmp/oauth-ingress.yaml

    >   ingress.networking.k8s.io/oauth-protected created
    >   ingress.networking.k8s.io/oauth-protector created


# -----------------------------------------------------
# Test the deployment.
#[user@kubernator]

    #
    # Can we drive the deployment manually using curl ?
    #


# -----------------------------------------------------
# -----------------------------------------------------
# Test the deployment.
#[user@desktop]


    firefox "http://aglais-002.metagrid.xyz/auth-test" &


# -----------------------------------------------------
# -----------------------------------------------------

    #
    # TIL These annotations work together to pass the Google userid and email to the backend service.
    # https://docs.syseleven.de/metakube/de/tutorials/setup-ingress-auth-to-use-keycloak-oauth#original-ingress
    # https://docs.syseleven.de/metakube/de/tutorials/setup-ingress-auth-to-use-keycloak-oauth#get-user-header-in-application
    #

    oauth-proxy.yaml

        apiVersion: apps/v1
        kind: Deployment
        metadata:
         ....
         name: oauth-proxy
        spec:
         ....
         template:
           ....
           spec:
             containers:
             - args:
               ....
               - --set-xauthrequest=true


    oauth-ingress.yaml

        apiVersion: networking.k8s.io/v1beta1
        kind: Ingress
        metadata:
         annotations:
           ....
           nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"


# -----------------------------------------------------
# -----------------------------------------------------

    #
    # WARNING The auth-url and auth-signin URLs contain '$' values.
    # WARNING If bash tries to fill them in, they will end up blank.
    #   https:///oauth2/auth
    #   https:///oauth2/start?rd
    # WARNING This disables the authentication, leaving the resource unprotected.
    #

    oauth-ingress.yaml

        apiVersion: networking.k8s.io/v1beta1
        kind: Ingress
        metadata:
         annotations:
           ....
           nginx.ingress.kubernetes.io/auth-url:    "https://\$host/agromulupt/auth"
           nginx.ingress.kubernetes.io/auth-signin: "https://\$host/agromulupt/start?rd=\$escaped_request_uri"

# -----------------------------------------------------
# -----------------------------------------------------







