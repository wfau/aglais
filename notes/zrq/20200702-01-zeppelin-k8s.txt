#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Zeppelin on Kubernetes
    https://zeppelin.apache.org/docs/0.9.0-SNAPSHOT/quickstart/kubernetes.html


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --hostname terraformer \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/terraform:/terraform:z" \
        atolmis/terraform-client \
        bash


# -----------------------------------------------------
# Set the cloud, credentials and cluster names.
#[user@terraformer]

    cloudname=gaia-prod
    clustername=Tiberius
    keypairname=zrq-gaia-keypair


# -----------------------------------------------------
# Delete any old state.
#[user@terraformer]

    rm -rf /terraform/.terraform
    rm -f  /terraform/tfvars

    rm -f  /terraform/terraform.tfsate
    rm -f  /terraform/terraform.tfsate.backup

# -----------------------------------------------------
# Create our tfvars file.
#[user@terraformer]

    cat > "${HOME}/cluster.tfvars" << EOF
zrq_cloud_name   = "${cloudname:?}-super"
zrq_cluster_name = "${clustername:?}"
zrq_worker_count = 4
zrq_max_worker_count = 6
EOF


# -----------------------------------------------------
# Run Terraform to deploy our cluster.
#[user@terraformer]

    pushd "/terraform"

        terraform init

    >   ....
    >   ....
    >   Initializing modules...
    >   ....
    >   ....
    >   Initializing the backend...
    >   ....
    >   Initializing provider plugins...
    >   ....
    >   ....
    >   Terraform has been successfully initialized!


        terraform plan \
            -var-file "${HOME}/cluster.tfvars"

    >   ....
    >     # module.cluster.null_resource.kubeconfig is tainted, so must be replaced
    >   -/+ resource "null_resource" "kubeconfig" {
    >       ....
    >       }
    >   
    >     # module.cluster.openstack_compute_keypair_v2.zrq_keypair will be created
    >     + resource "openstack_compute_keypair_v2" "zrq_keypair" {
    >       ....
    >       }
    >   
    >     # module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster will be created
    >     + resource "openstack_containerinfra_cluster_v1" "zrq_cluster" {
    >       ....
    >       }
    >   
    >   Plan: 3 to add, 0 to change, 1 to destroy.


        terraform apply \
            -var-file "${HOME}/cluster.tfvars"

    >   module.cluster.null_resource.kubeconfig: Destroying... [id=7295459269485074672]
    >   module.cluster.null_resource.kubeconfig: Destruction complete after 0s
    >   module.cluster.openstack_compute_keypair_v2.zrq_keypair: Creating...
    >   module.cluster.openstack_compute_keypair_v2.zrq_keypair: Creation complete after 1s [id=Tiberius-keypair]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Creating...
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [10s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [20s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [30s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [40s elapsed]
    >   ....
    >   ....
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [5m30s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [5m40s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [5m50s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Still creating... [6m0s elapsed]
    >   module.cluster.openstack_containerinfra_cluster_v1.zrq_cluster: Creation complete after 6m8s [id=8b02387d-3051-4b15-a6c0-04bacf288bd6]
    >   module.cluster.null_resource.kubeconfig: Creating...
    >   module.cluster.null_resource.kubeconfig: Provisioning with 'local-exec'...
    >   module.cluster.null_resource.kubeconfig (local-exec): Executing: ["/bin/sh" "-c" "mkdir -p ~/.kube/Tiberius; openstack --os-cloud gaia-prod-super coe cluster config Tiberius --dir ~/.kube/Tiberius --force;"]
    >   module.cluster.null_resource.kubeconfig: Still creating... [10s elapsed]
    >   module.cluster.null_resource.kubeconfig (local-exec): 'SHELL'
    >   
    >   
    >   Error: Error running command 'mkdir -p ~/.kube/Tiberius; openstack --os-cloud gaia-prod-super coe cluster config Tiberius --dir ~/.kube/Tiberius --force;': exit status 1. Output: 'SHELL'

    popd


# -----------------------------------------------------
# Check the kubectl config for our cluster.
#[user@terraformer]

    cat "${HOME}/.kube/${clustername:?}/config"

    >   apiVersion: v1
    >   clusters:
    >   - cluster:
    >       certificate-authority-data: LS0tLS1C........UtLS0tLQ==
    >       server: https://128.232.227.168:6443
    >     name: Tiberius
    >   contexts:
    >   - context:
    >       cluster: Tiberius
    >       user: admin
    >     name: default
    >   current-context: default
    >   kind: Config
    >   preferences: {}
    >   users:
    >   - name: admin
    >     user:
    >       client-certificate-data: LS0tLS1C........RS0tLS0t
    >       client-key-data: LS0tLS1C........tLS0tLQo=

    #
    # Ignore the error for now - the config seems fine.
    #


# -----------------------------------------------------
# Use kubectl to get details of our cluster.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        cluster-info

    >   Kubernetes master is running at https://128.232.227.168:6443
    >   Heapster is running at https://128.232.227.168:6443/api/v1/namespaces/kube-system/services/heapster/proxy
    >   CoreDNS is running at https://128.232.227.168:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy


# -----------------------------------------------------
# Download the Zeppelin deployment template.
#[user@terraformer]

    mkdir "${HOME}/zeppelin"
    pushd "${HOME}/zeppelin"

        curl -s -O https://raw.githubusercontent.com/apache/zeppelin/master/k8s/zeppelin-server.yaml

    popd


# -----------------------------------------------------
# Deploy Zeppelin.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        apply \
            --filename "${HOME}/zeppelin/zeppelin-server.yaml"

    >   configmap/zeppelin-server-conf-map created
    >   configmap/zeppelin-server-conf created
    >   deployment.apps/zeppelin-server created
    >   service/zeppelin-server created
    >   serviceaccount/zeppelin-server created
    >   role.rbac.authorization.k8s.io/zeppelin-server-role created
    >   rolebinding.rbac.authorization.k8s.io/zeppelin-server-role-binding created


# -----------------------------------------------------
# Check the status.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get \
            configmap/zeppelin-server-conf-map \
            --output json

    >   {
    >       "apiVersion": "v1",
    >       "data": {
    >           "SERVICE_DOMAIN": "local.zeppelin-project.org:8080",
    >           "SPARK_HOME": "/spark",
    >           "SPARK_MASTER": "k8s://https://kubernetes.default.svc",
    >           "ZEPPELIN_HOME": "/zeppelin",
    >           "ZEPPELIN_K8S_CONTAINER_IMAGE": "apache/zeppelin:0.9.0-SNAPSHOT",
    >           "ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE": "spark:2.4.5",
    >           "ZEPPELIN_SERVER_RPC_PORTRANGE": "12320:12320"
    >       },
    >       "kind": "ConfigMap",
    >       "metadata": {
    >           "annotations": {
    >               "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"SERVICE_DOMAIN\":\"local.zeppelin-project.org:8080\",\"SPARK_HOME\":\"/spark\",\"SPARK_MASTER\":\"k8s://https://kubernetes.default.svc\",\"ZEPPELIN_HOME\":\"/zeppelin\",\"ZEPPELIN_K8S_CONTAINER_IMAGE\":\"apache/zeppelin:0.9.0-SNAPSHOT\",\"ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE\":\"spark:2.4.5\",\"ZEPPELIN_SERVER_RPC_PORTRANGE\":\"12320:12320\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"zeppelin-server-conf-map\",\"namespace\":\"default\"}}\n"
    >           },
    >           "creationTimestamp": "2020-07-02T03:47:19Z",
    >           "name": "zeppelin-server-conf-map",
    >           "namespace": "default",
    >           "resourceVersion": "4740",
    >           "selfLink": "/api/v1/namespaces/default/configmaps/zeppelin-server-conf-map",
    >           "uid": "66d85614-0c76-4ec7-82d7-e90bcd08d77d"
    >       }
    >   }


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get \
            configmap/zeppelin-server-conf \
            --output json

    >   {
    >       "apiVersion": "v1",
    >       "data": {
    >           "nginx.conf": "daemon off;\nworker_processes auto;\nevents {\n  worker_connections 1024;\n}\nhttp {\n  map $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n  }\n\n  # first server block will be default. Proxy zeppelin server.\n  server {\n    listen 80;\n    location / {\n      proxy_pass http://localhost:8080;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_redirect http://localhost $scheme://SERVICE_DOMAIN;\n    }\n  }\n\n  # match request domain [port]-[service].[serviceDomain]\n  # proxy extra service such as spark-ui\n  server {\n    listen 80;\n    server_name \"~(?\u003csvc_port\u003e[0-9]+)-(?\u003csvc_name\u003e[^.]*)\\.(.*)\";\n    location / {\n      resolver 127.0.0.1:53 ipv6=off;\n      proxy_pass http://$svc_name.NAMESPACE.svc:$svc_port;\n      proxy_set_header Host $host;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection $connection_upgrade;\n      proxy_redirect http://localhost $scheme://SERVICE_DOMAIN;\n\n      # redirect rule for spark ui. 302 redirect response misses port number of service domain\n      proxy_redirect ~(http:[/]+[0-9]+[-][^-]+[-][^.]+)[^/]+(\\/jobs.*) $1.SERVICE_DOMAIN$2;\n    }\n  }\n}\n"
    >       },
    >       "kind": "ConfigMap",
    >       "metadata": {
    >           "annotations": {
    >               "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"nginx.conf\":\"daemon off;\\nworker_processes auto;\\nevents {\\n  worker_connections 1024;\\n}\\nhttp {\\n  map $http_upgrade $connection_upgrade {\\n    default upgrade;\\n    '' close;\\n  }\\n\\n  # first server block will be default. Proxy zeppelin server.\\n  server {\\n    listen 80;\\n    location / {\\n      proxy_pass http://localhost:8080;\\n      proxy_set_header Host $host;\\n      proxy_http_version 1.1;\\n      proxy_set_header Upgrade $http_upgrade;\\n      proxy_set_header Connection $connection_upgrade;\\n      proxy_redirect http://localhost $scheme://SERVICE_DOMAIN;\\n    }\\n  }\\n\\n  # match request domain [port]-[service].[serviceDomain]\\n  # proxy extra service such as spark-ui\\n  server {\\n    listen 80;\\n    server_name \\\"~(?\\u003csvc_port\\u003e[0-9]+)-(?\\u003csvc_name\\u003e[^.]*)\\\\.(.*)\\\";\\n    location / {\\n      resolver 127.0.0.1:53 ipv6=off;\\n      proxy_pass http://$svc_name.NAMESPACE.svc:$svc_port;\\n      proxy_set_header Host $host;\\n      proxy_http_version 1.1;\\n      proxy_set_header Upgrade $http_upgrade;\\n      proxy_set_header Connection $connection_upgrade;\\n      proxy_redirect http://localhost $scheme://SERVICE_DOMAIN;\\n\\n      # redirect rule for spark ui. 302 redirect response misses port number of service domain\\n      proxy_redirect ~(http:[/]+[0-9]+[-][^-]+[-][^.]+)[^/]+(\\\\/jobs.*) $1.SERVICE_DOMAIN$2;\\n    }\\n  }\\n}\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"zeppelin-server-conf\",\"namespace\":\"default\"}}\n"
    >           },
    >           "creationTimestamp": "2020-07-02T03:47:19Z",
    >           "name": "zeppelin-server-conf",
    >           "namespace": "default",
    >           "resourceVersion": "4741",
    >           "selfLink": "/api/v1/namespaces/default/configmaps/zeppelin-server-conf",
    >           "uid": "fccddb22-4454-40b4-b07b-8ea0a80719b2"
    >       }
    >   }


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get \
            deployment.apps/zeppelin-server \
            --output json

    >   {
    >       "apiVersion": "apps/v1",
    >       "kind": "Deployment",
    >       "metadata": {
    >           "annotations": {
    >               "deployment.kubernetes.io/revision": "1",
    >               "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"app.kubernetes.io/name\":\"zeppelin-server\"},\"name\":\"zeppelin-server\",\"namespace\":\"default\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"app.kubernetes.io/name\":\"zeppelin-server\"}},\"strategy\":{\"type\":\"RollingUpdate\"},\"template\":{\"metadata\":{\"labels\":{\"app.kubernetes.io/name\":\"zeppelin-server\"}},\"spec\":{\"containers\":[{\"command\":[\"sh\",\"-c\",\"$(ZEPPELIN_HOME)/bin/zeppelin.sh\"],\"env\":[{\"name\":\"POD_UID\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.uid\"}}},{\"name\":\"POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"apiVersion\":\"v1\",\"fieldPath\":\"metadata.name\"}}}],\"envFrom\":[{\"configMapRef\":{\"name\":\"zeppelin-server-conf-map\"}}],\"image\":\"apache/zeppelin:0.9.0-SNAPSHOT\",\"lifecycle\":{\"preStop\":{\"exec\":{\"command\":[\"sh\",\"-c\",\"ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill\"]}}},\"name\":\"zeppelin-server\",\"ports\":[{\"containerPort\":8080,\"name\":\"http\"},{\"containerPort\":8443,\"name\":\"https\"},{\"containerPort\":12320,\"name\":\"rpc\"}]},{\"args\":[\"cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf; sed -i -e \\\"s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g\\\" /etc/nginx/nginx.conf; sed -i -e \\\"s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g\\\" /etc/nginx/nginx.conf; cat /etc/nginx/nginx.conf; /usr/sbin/nginx\"],\"command\":[\"/bin/sh\",\"-c\"],\"env\":[{\"name\":\"SERVICE_DOMAIN\",\"valueFrom\":{\"configMapKeyRef\":{\"key\":\"SERVICE_DOMAIN\",\"name\":\"zeppelin-server-conf-map\"}}}],\"image\":\"nginx:1.14.0\",\"lifecycle\":{\"preStop\":{\"exec\":{\"command\":[\"/usr/sbin/nginx\",\"-s\",\"quit\"]}}},\"name\":\"zeppelin-server-gateway\",\"volumeMounts\":[{\"mountPath\":\"/tmp/conf\",\"name\":\"nginx-conf\"}]},{\"args\":[\"--listen\",\"127.0.0.1:53\",\"--default-resolver\",\"--append-search-domains\",\"--hostsfile=/etc/hosts\",\"--verbose\"],\"image\":\"janeczku/go-dnsmasq:release-1.0.5\",\"name\":\"dnsmasq\"}],\"serviceAccountName\":\"zeppelin-server\",\"volumes\":[{\"configMap\":{\"items\":[{\"key\":\"nginx.conf\",\"path\":\"nginx.conf\"}],\"name\":\"zeppelin-server-conf\"},\"name\":\"nginx-conf\"}]}}}}\n"
    >           },
    >           "creationTimestamp": "2020-07-02T03:47:19Z",
    >           "generation": 1,
    >           "labels": {
    >               "app.kubernetes.io/name": "zeppelin-server"
    >           },
    >           "name": "zeppelin-server",
    >           "namespace": "default",
    >           "resourceVersion": "6641",
    >           "selfLink": "/apis/apps/v1/namespaces/default/deployments/zeppelin-server",
    >           "uid": "ca9ef8cc-7cb6-487d-908f-a2527b08735b"
    >       },
    >       "spec": {
    >           "progressDeadlineSeconds": 600,
    >           "replicas": 1,
    >           "revisionHistoryLimit": 10,
    >           "selector": {
    >               "matchLabels": {
    >                   "app.kubernetes.io/name": "zeppelin-server"
    >               }
    >           },
    >           "strategy": {
    >               "rollingUpdate": {
    >                   "maxSurge": "25%",
    >                   "maxUnavailable": "25%"
    >               },
    >               "type": "RollingUpdate"
    >           },
    >           "template": {
    >               "metadata": {
    >                   "creationTimestamp": null,
    >                   "labels": {
    >                       "app.kubernetes.io/name": "zeppelin-server"
    >                   }
    >               },
    >               "spec": {
    >                   "containers": [
    >                       {
    >                           "command": [
    >                               "sh",
    >                               "-c",
    >                               "$(ZEPPELIN_HOME)/bin/zeppelin.sh"
    >                           ],
    >                           "env": [
    >                               {
    >                                   "name": "POD_UID",
    >                                   "valueFrom": {
    >                                       "fieldRef": {
    >                                           "apiVersion": "v1",
    >                                           "fieldPath": "metadata.uid"
    >                                       }
    >                                   }
    >                               },
    >                               {
    >                                   "name": "POD_NAME",
    >                                   "valueFrom": {
    >                                       "fieldRef": {
    >                                           "apiVersion": "v1",
    >                                           "fieldPath": "metadata.name"
    >                                       }
    >                                   }
    >                               }
    >                           ],
    >                           "envFrom": [
    >                               {
    >                                   "configMapRef": {
    >                                       "name": "zeppelin-server-conf-map"
    >                                   }
    >                               }
    >                           ],
    >                           "image": "apache/zeppelin:0.9.0-SNAPSHOT",
    >                           "imagePullPolicy": "IfNotPresent",
    >                           "lifecycle": {
    >                               "preStop": {
    >                                   "exec": {
    >                                       "command": [
    >                                           "sh",
    >                                           "-c",
    >                                           "ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill"
    >                                       ]
    >                                   }
    >                               }
    >                           },
    >                           "name": "zeppelin-server",
    >                           "ports": [
    >                               {
    >                                   "containerPort": 8080,
    >                                   "name": "http",
    >                                   "protocol": "TCP"
    >                               },
    >                               {
    >                                   "containerPort": 8443,
    >                                   "name": "https",
    >                                   "protocol": "TCP"
    >                               },
    >                               {
    >                                   "containerPort": 12320,
    >                                   "name": "rpc",
    >                                   "protocol": "TCP"
    >                               }
    >                           ],
    >                           "resources": {},
    >                           "terminationMessagePath": "/dev/termination-log",
    >                           "terminationMessagePolicy": "File"
    >                       },
    >                       {
    >                           "args": [
    >                               "cp -f /tmp/conf/nginx.conf /etc/nginx/nginx.conf; sed -i -e \"s/SERVICE_DOMAIN/$SERVICE_DOMAIN/g\" /etc/nginx/nginx.conf; sed -i -e \"s/NAMESPACE/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/g\" /etc/nginx/nginx.conf; cat /etc/nginx/nginx.conf; /usr/sbin/nginx"
    >                           ],
    >                           "command": [
    >                               "/bin/sh",
    >                               "-c"
    >                           ],
    >                           "env": [
    >                               {
    >                                   "name": "SERVICE_DOMAIN",
    >                                   "valueFrom": {
    >                                       "configMapKeyRef": {
    >                                           "key": "SERVICE_DOMAIN",
    >                                           "name": "zeppelin-server-conf-map"
    >                                       }
    >                                   }
    >                               }
    >                           ],
    >                           "image": "nginx:1.14.0",
    >                           "imagePullPolicy": "IfNotPresent",
    >                           "lifecycle": {
    >                               "preStop": {
    >                                   "exec": {
    >                                       "command": [
    >                                           "/usr/sbin/nginx",
    >                                           "-s",
    >                                           "quit"
    >                                       ]
    >                                   }
    >                               }
    >                           },
    >                           "name": "zeppelin-server-gateway",
    >                           "resources": {},
    >                           "terminationMessagePath": "/dev/termination-log",
    >                           "terminationMessagePolicy": "File",
    >                           "volumeMounts": [
    >                               {
    >                                   "mountPath": "/tmp/conf",
    >                                   "name": "nginx-conf"
    >                               }
    >                           ]
    >                       },
    >                       {
    >                           "args": [
    >                               "--listen",
    >                               "127.0.0.1:53",
    >                               "--default-resolver",
    >                               "--append-search-domains",
    >                               "--hostsfile=/etc/hosts",
    >                               "--verbose"
    >                           ],
    >                           "image": "janeczku/go-dnsmasq:release-1.0.5",
    >                           "imagePullPolicy": "IfNotPresent",
    >                           "name": "dnsmasq",
    >                           "resources": {},
    >                           "terminationMessagePath": "/dev/termination-log",
    >                           "terminationMessagePolicy": "File"
    >                       }
    >                   ],
    >                   "dnsPolicy": "ClusterFirst",
    >                   "restartPolicy": "Always",
    >                   "schedulerName": "default-scheduler",
    >                   "securityContext": {},
    >                   "serviceAccount": "zeppelin-server",
    >                   "serviceAccountName": "zeppelin-server",
    >                   "terminationGracePeriodSeconds": 30,
    >                   "volumes": [
    >                       {
    >                           "configMap": {
    >                               "defaultMode": 420,
    >                               "items": [
    >                                   {
    >                                       "key": "nginx.conf",
    >                                       "path": "nginx.conf"
    >                                   }
    >                               ],
    >                               "name": "zeppelin-server-conf"
    >                           },
    >                           "name": "nginx-conf"
    >                       }
    >                   ]
    >               }
    >           }
    >       },
    >       "status": {
    >           "conditions": [
    >               {
    >                   "lastTransitionTime": "2020-07-02T03:47:19Z",
    >                   "lastUpdateTime": "2020-07-02T03:47:19Z",
    >                   "message": "Deployment does not have minimum availability.",
    >                   "reason": "MinimumReplicasUnavailable",
    >                   "status": "False",
    >                   "type": "Available"
    >               },
    >               {
    >                   "lastTransitionTime": "2020-07-02T03:57:20Z",
    >                   "lastUpdateTime": "2020-07-02T03:57:20Z",
    >                   "message": "ReplicaSet \"zeppelin-server-7868786bcc\" has timed out progressing.",
    >                   "reason": "ProgressDeadlineExceeded",
    >                   "status": "False",
    >                   "type": "Progressing"
    >               }
    >           ],
    >           "observedGeneration": 1,
    >           "replicas": 1,
    >           "unavailableReplicas": 1,
    >           "updatedReplicas": 1
    >       }
    >   }


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get \
            service/zeppelin-server \
            --output json

    >   {
    >       "apiVersion": "v1",
    >       "kind": "Service",
    >       "metadata": {
    >           "annotations": {
    >               "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"name\":\"zeppelin-server\",\"namespace\":\"default\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":80},{\"name\":\"rpc\",\"port\":12320}],\"selector\":{\"app.kubernetes.io/name\":\"zeppelin-server\"}}}\n"
    >           },
    >           "creationTimestamp": "2020-07-02T03:47:19Z",
    >           "name": "zeppelin-server",
    >           "namespace": "default",
    >           "resourceVersion": "4754",
    >           "selfLink": "/api/v1/namespaces/default/services/zeppelin-server",
    >           "uid": "8bafb93f-6ca0-4d13-b0eb-c3fe1a0b8418"
    >       },
    >       "spec": {
    >           "clusterIP": "10.254.94.62",
    >           "ports": [
    >               {
    >                   "name": "http",
    >                   "port": 80,
    >                   "protocol": "TCP",
    >                   "targetPort": 80
    >               },
    >               {
    >                   "name": "rpc",
    >                   "port": 12320,
    >                   "protocol": "TCP",
    >                   "targetPort": 12320
    >               }
    >           ],
    >           "selector": {
    >               "app.kubernetes.io/name": "zeppelin-server"
    >           },
    >           "sessionAffinity": "None",
    >           "type": "ClusterIP"
    >       },
    >       "status": {
    >           "loadBalancer": {}
    >       }
    >   }






# -----------------------------------------------------
# -----------------------------------------------------
# Setup a port forwarding proxy.
#[user@desktop]

    source "${HOME}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --publish 8000 \
        --publish 8001 \
        --publish 8080 \
        --name kubectl-proxy \
        --hostname kubectl-proxy \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/terraform:/terraform:z" \
        atolmis/terraform-client \
        bash


# -----------------------------------------------------
# Set the cloud, credentials and cluster names.
#[user@kubectl-proxy]

    cloudname=gaia-prod
    clustername=Tiberius

# -----------------------------------------------------
# Get the cluster config for kubectl.
#[user@kubectl-proxy]

    mkdir -p "${HOME}/.kube/${clustername:?}"
    openstack \
        --os-cloud "${cloudname:?}-super" \
        coe cluster config \
            "${clustername:?}" \
                --force \
                --dir "${HOME}/.kube/${clustername:?}"


# -----------------------------------------------------
# Port forward Zeppelin server port,
#[user@kubectl-proxy]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        port-forward \
            service/zeppelin-server \
                8080:80



