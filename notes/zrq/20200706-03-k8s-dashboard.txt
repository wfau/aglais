#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

    Kubernetes dashboard
    https://github.com/kubernetes/dashboard


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name dashboard \
        --hostname dashboard \
        --publish 127.0.0.1:8443:8443 \
        --env "clouduser=${AGLAIS_USER:?}" \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --env "clustername=${CLUSTER_NAME:?}" \
        --volume "${HOME:?}/clouds.yaml:/etc/openstack/clouds.yaml:ro,z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/kubernetes:/kubernetes:z" \
        atolmis/openstack-client \
        bash

# -----------------------------------------------------
# Set the cloud and cluster names.
#[user@kubernator]

    # Deprecated - inherited from aglais.env
    # cloudname=gaia-prod
    # clustername=Tiberius

# -----------------------------------------------------
# Get the connection details for our cluster.
#[user@kubernator]

    mkdir -p "${HOME}/.kube/${clustername:?}"
    openstack \
        --os-cloud "${cloudname:?}-super" \
        coe cluster config \
            "${clustername:?}" \
                --force \
                --dir "${HOME}/.kube/${clustername:?}"

    # TODO - why does this always return '1'
    #      adding -v -v to the call ends with

    > ....
    > ....
    > 'SHELL'
    > clean_up ConfigCluster: 'SHELL'
    > END return value: 1

    # Is this related ?
    # https://bugs.launchpad.net/python-magnumclient/+bug/1807104


# -----------------------------------------------------
# Deploy the dashboard (recomended method).
# https://github.com/kubernetes/dashboard
# https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.3/aio/deploy/recommended.yaml
#[root@dashboard]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        apply --filename /kubernetes/dashboard/dashboard-deploy.yaml

    >   namespace/kubernetes-dashboard created
    >   serviceaccount/kubernetes-dashboard created
    >   service/kubernetes-dashboard created
    >   secret/kubernetes-dashboard-certs created
    >   secret/kubernetes-dashboard-csrf created
    >   secret/kubernetes-dashboard-key-holder created
    >   configmap/kubernetes-dashboard-settings created
    >   role.rbac.authorization.k8s.io/kubernetes-dashboard created
    >   clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
    >   rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
    >   clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
    >   deployment.apps/kubernetes-dashboard created
    >   service/dashboard-metrics-scraper created
    >   deployment.apps/dashboard-metrics-scraper created


# -----------------------------------------------------
# Create our dashboard user account.
# https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md
#[root@dashboard]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename "/kubernetes/dashboard/dashboard-account.yaml"

    >   serviceaccount/dashboard-user created
    >   clusterrolebinding.rbac.authorization.k8s.io/dashboard-user created


# -----------------------------------------------------
# Get the secret token for our dashboard user account.
#[root@dashboard]

    kubectl \
        --output json \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        --namespace kubernetes-dashboard \
            get secret \
    | jq -r '.items[] | select(.metadata.annotations."kubernetes.io/service-account.name" == "dashboard-user") | .data.token'

    >   ZXlKaGJH........lCaFhldw==

    #
    # ** The value for the token returned by 'get secret' is base64 encoded. **
    #

# -----------------------------------------------------
# Use command line tool to decode the secret.
# https://kubernetes.io/docs/concepts/configuration/secret/#decoding-a-secret
#[root@dashboard]

    kubectl \
        --output json \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        --namespace kubernetes-dashboard \
            get secret \
    | jq -r '.items[] | select(.metadata.annotations."kubernetes.io/service-account.name" == "dashboard-user") | .data.token' \
    | base64 --decode


    >   eyJhbGci........98iBhXew

# -----------------------------------------------------
# Use JQ to decode the secret.
# https://github.com/stedolan/jq/issues/47#issuecomment-374179653
#[root@dashboard]

    dashtoken=$(
        kubectl \
            --output json \
            --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
            --namespace kubernetes-dashboard \
                get secret \
        | jq -r '.items[] | select(.metadata.annotations."kubernetes.io/service-account.name" == "dashboard-user") | .data.token | @base64d'
        )

    echo ${dashtoken:?}

    >   eyJhbGci........98iBhXew


# -----------------------------------------------------
# Get the deployed pod name.
#[root@dashboard]

    podname=$(
        kubectl \
            --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
            get pods \
                --namespace kubernetes-dashboard \
                --selector "k8s-app=kubernetes-dashboard" \
                --output jsonpath="{.items[0].metadata.name}"
        )

    echo "Pod name [${podname:?}]"

    >   Pod name [kubernetes-dashboard-65bb64d6cb-5zcvq]

# -----------------------------------------------------
# Setup the port forward.
#[root@dashboard]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        --namespace kubernetes-dashboard \
            port-forward "${podname:?}" 8443:8443

    >   Forwarding from 127.0.0.1:8443 -> 8443
    >   Forwarding from [::1]:8443 -> 8443
    >   ....

# -----------------------------------------------------
# -----------------------------------------------------
# Point firefox at the proxy port.
#[user@desktop]

    firefox "https://localhost:8443/#/login" &


