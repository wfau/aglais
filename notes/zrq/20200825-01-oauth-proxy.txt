#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME:?}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --hostname kubenator \
        --env "cloudname=${AGLAIS_CLOUD:?}" \
        --env "clustername=${CLUSTER_NAME:?}" \
        --env "SSH_AUTH_SOCK=/tmp/ssh_auth_sock" \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock:z" \
        --volume '/var/run/docker.sock:/var/run/docker.sock:z' \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/kubernetes:/kubernetes:z" \
        --volume "${ZEPPELIN_CODE}:/zeppelin:z" \
        atolmis/openstack-client \
        bash


# -----------------------------------------------------
# Configure our secret function.
#[user@kubernator]

    mkdir ${HOME}/bin
    cat > ${HOME}/bin/secret << 'EOF'
ssh -n \
    'dmr@trop01.roe.ac.uk' \
    "bin/secret '${1}'"
EOF
    chmod a+x ${HOME}/bin/secret

    secret frog

    >   Green Frog


# -----------------------------------------------------
# Get the connection details for our cluster.
#[user@kubernator]

    mkdir -p "${HOME}/.kube"
    openstack \
        --os-cloud "${cloudname:?}-super" \
        coe cluster config \
            "${clustername:?}" \
                --force \
                --dir "${HOME}/.kube"

    kubectl \
        cluster-info

    >   Kubernetes master is running at https://....
    >   Heapster is running at https://....
    >   CoreDNS is running at https://....


# -----------------------------------------------------
# Get a copy of the Kubernetes NGINX Ingress project.
# https://github.com/kubernetes/ingress-nginx.git
#[user@kubernator]

    dnf install -y  git

    cd ${HOME}
    git clone https://github.com/kubernetes/ingress-nginx.git

    >   Cloning into 'ingress-nginx'...
    >   remote: Enumerating objects: 33, done.
    >   remote: Counting objects: 100% (33/33), done.
    >   remote: Compressing objects: 100% (30/30), done.
    >   remote: Total 95787 (delta 8), reused 14 (delta 2), pack-reused 95754
    >   Receiving objects: 100% (95787/95787), 112.15 MiB | 1.51 MiB/s, done.
    >   Resolving deltas: 100% (53769/53769), done.


# -----------------------------------------------------
# Deploy a test HTTP service.
# https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#test-http-service
#[user@kubernator]

    pushd "${HOME}/ingress-nginx"
        pushd 'docs/examples'

            kubectl create \
                --filename http-svc.yaml

        popd
    popd


    >   deployment.apps/http-svc created
    >   service/http-svc created


# -----------------------------------------------------
# Create our SSL keys and store them in a Kubernetes secret.
# https://github.com/kubernetes/ingress-nginx/blob/master/docs/examples/PREREQUISITES.md#tls-certificates
#[user@kubernator]

    hostname=vernon.metagrid.xyz
    certname=tls-secret

    openssl req \
        -x509 \
        -sha256 \
        -nodes \
        -days 365 \
        -newkey rsa:2048 \
        -keyout /tmp/tls.key \
        -out    /tmp/tls.crt \
        -subj "/CN=${hostname:?}/O=Aglais"

    >   Generating a RSA private key
    >   ....................................+++++
    >   ....................................+++++
    >   writing new private key to '/tmp/tls.key'


    kubectl create secret \
        tls \
        ${certname} \
            --key  /tmp/tls.key \
            --cert /tmp/tls.crt

    >   secret/tls-secret created


# -----------------------------------------------------
# Deploy a TLS test Ingress
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#deployment
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#validation
#[user@kubernator]

    cat << EOF > /tmp/tls-test.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: tls-test
spec:
  tls:
    - hosts:
      - ${hostname}
      secretName: ${certname}
  rules:
    - host: ${hostname}
      http:
        paths:
        - path: /tls-test
          backend:
            serviceName: http-svc
            servicePort: 80
EOF

    kubectl apply \
        --filename /tmp/tls-test.yaml

    >   ingress.networking.k8s.io/tls-test created


    kubectl describe \
        Ingress tls-test

    >   Name:             tls-test
    >   Namespace:        default
    >   Address:
    >   Default backend:  default-http-backend:80 (<none>)
    >   TLS:
    >     tls-secret terminates vernon.metagrid.xyz
    >   Rules:
    >     Host                 Path  Backends
    >     ----                 ----  --------
    >     vernon.metagrid.xyz
    >                          /tls-test   http-svc:80 (10.100.1.92:8080)
    >   Annotations:
    >   Events:
    >     Type    Reason  Age   From                      Message
    >     ----    ------  ----  ----                      -------
    >     Normal  CREATE  10s   nginx-ingress-controller  Ingress default/tls-test


    ingressip=$(
        kubectl get \
            Ingress tls-test \
                --output json \
        | jq -r '.status.loadBalancer.ingress[0].ip'
        )

    echo "Ingress [${ingressip:?}]"

    >   Ingress [128.232.227.191]


# -----------------------------------------------------
# -----------------------------------------------------
# Update our internal DNS
#[user@dns-serer]

    aglais-003.metagrid.xyz    A       128.232.227.191
    vernon.metagrid.xyz        CNAME   aglais-003.metagrid.xyz.


# -----------------------------------------------------
# -----------------------------------------------------
# Test our SSL keys.
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#deployment
# https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/tls-termination#validation
#[user@kubernator]


    curl --head "http://${ingressip:?}/tls-test"

    >   HTTP/1.1 404 Not Found
    >   Server: nginx/1.19.1
    >   Date: Tue, 25 Aug 2020 04:01:32 GMT
    >   Content-Type: text/html
    >   Content-Length: 153
    >   Connection: keep-alive


    curl --head "http://${hostname:?}/tls-test"

    >   HTTP/1.1 308 Permanent Redirect
    >   Server: nginx/1.19.1
    >   Date: Tue, 25 Aug 2020 04:03:22 GMT
    >   Content-Type: text/html
    >   Content-Length: 171
    >   Connection: keep-alive
    >   Location: https://vernon.metagrid.xyz/tls-test


    curl --head "https://${hostname:?}/tls-test"

    >   curl: (60) SSL certificate problem: self signed certificate
    >   More details here: https://curl.haxx.se/docs/sslcerts.html
    >   
    >   curl failed to verify the legitimacy of the server and therefore could not
    >   establish a secure connection to it. To learn more about this situation and
    >   how to fix it, please visit the web page mentioned above.


    curl --insecure --head "https://${hostname:?}/tls-test"

    >   HTTP/2 200
    >   server: nginx/1.19.1
    >   date: Tue, 25 Aug 2020 04:03:48 GMT
    >   content-type: text/plain
    >   vary: Accept-Encoding
    >   strict-transport-security: max-age=15724800; includeSubDomains


# -----------------------------------------------------
# Configure the oauth2_proxy Service.
#[user@kubernator]

    OAUTH2_PROXY_CLIENT_ID=$(
        secret google.amdar.id
        )
    OAUTH2_PROXY_CLIENT_SECRET=$(
        secret google.amdar.secret
        )
    OAUTH2_PROXY_COOKIE_SECRET=$(
        python -c 'import os,base64; print(base64.b64encode(os.urandom(16)).decode("ascii"))'
        )

    cat > /tmp/oauth-proxy.yaml << EOF
---
apiVersion: apps/v1
kind: Deployment
metadata:
 labels:
   k8s-app: oauth-proxy
 name: oauth-proxy
 namespace: default
spec:
 replicas: 1
 selector:
   matchLabels:
     k8s-app: oauth-proxy
 template:
   metadata:
     labels:
       k8s-app: oauth-proxy
   spec:
     containers:
     - args:
       - --provider=google
       - --email-domain=*
       - --http-address=0.0.0.0:4180
       - --proxy-prefix=/agromulupt
       - --set-xauthrequest=true
       env:
       - name:    OAUTH2_PROXY_CLIENT_ID
         value: ${OAUTH2_PROXY_CLIENT_ID}
       - name:    OAUTH2_PROXY_CLIENT_SECRET
         value: ${OAUTH2_PROXY_CLIENT_SECRET}
       - name:    OAUTH2_PROXY_COOKIE_SECRET
         value: ${OAUTH2_PROXY_COOKIE_SECRET}
       image: quay.io/oauth2-proxy/oauth2-proxy:latest
       imagePullPolicy: Always
       name: oauth-proxy
       ports:
       - containerPort: 4180
         protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
 labels:
   k8s-app: oauth-proxy
 name: oauth-proxy
 namespace: default
spec:
 ports:
 - name: http
   port: 4180
   protocol: TCP
   targetPort: 4180
 selector:
   k8s-app: oauth-proxy
EOF


# -----------------------------------------------------
# Deploy the OAuth proxy.
#[user@kubernator]

    kubectl create \
        --filename /tmp/oauth-proxy.yaml

    >   deployment.apps/oauth-proxy created
    >   service/oauth-proxy created


# -----------------------------------------------------
# Configure the oauth_proxy Ingress.
#[user@kubernator]

    #
    # WARNING The auth-url and auth-signin URLs contain '$' values.
    # WARNING If bash tries to fill them in, they will end up blank.
    #   https:///oauth2/auth
    #   https:///oauth2/start?rd
    # WARNING This disables the authentication, leaving the protected resource exposed.
    #

    cat > /tmp/oauth-ingress.yaml << EOF
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 annotations:
   nginx.ingress.kubernetes.io/auth-url:    "https://\$host/agromulupt"
   nginx.ingress.kubernetes.io/auth-signin: "https://\$host/agromulupt/start?rd=\$escaped_request_uri"
   nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"
 name: oauth-protected
 namespace: default
spec:
 rules:
 - host: ${hostname:?}
   http:
     paths:
     - path: /auth-test
       backend:
         serviceName: http-svc
         servicePort: 80

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 name: oauth-protector
 namespace: default
spec:
 rules:
 - host: ${hostname:?}
   http:
     paths:
     - path: /agromulupt
       backend:
         serviceName: oauth-proxy
         servicePort: 4180

 tls:
 - hosts:
   - ${hostname:?}
   secretName: ${certname:?}
EOF


# -----------------------------------------------------
# Deploy the OAuth Ingress connectors.
#[user@kubernator]

    kubectl apply \
        --filename /tmp/oauth-ingress.yaml

    >   ingress.networking.k8s.io/oauth-protected created
    >   ingress.networking.k8s.io/oauth-protector created


# -----------------------------------------------------
# -----------------------------------------------------
# Test the deployment.
#[user@desktop]


    firefox "http://vernon.metagrid.xyz/auth-test" &

    #
    # We don't get a redirect, we get a 500 server error
    curl --head --insecure 'https://vernon.metagrid.xyz/auth-test'

    >   HTTP/2 500
    >   server: nginx/1.19.1
    >   date: Tue, 25 Aug 2020 11:05:28 GMT
    >   content-type: text/html
    >   content-length: 177
    >   strict-transport-security: max-age=15724800; includeSubDomains



    # The base URL returns status forbidden.
    curl --head --insecure 'https://vernon.metagrid.xyz/agromulupt'
    curl --head --insecure 'https://vernon.metagrid.xyz/agromulupt/'

    >   HTTP/2 403
    >   server: nginx/1.19.1
    >   date: Tue, 25 Aug 2020 11:06:34 GMT
    >   content-type: text/html; charset=utf-8
    >   vary: Accept-Encoding
    >   cache-control: no-cache, no-store, must-revalidate, max-age=0
    >   expires: Thu, 01 Jan 1970 00:00:00 UTC
    >   strict-transport-security: max-age=15724800; includeSubDomains


    # The base URL content is the login form pointing at the start URL.
    curl --insecure 'https://vernon.metagrid.xyz/agromulupt'

    >   	<form method="GET" action="/agromulupt/start">
    >   	<input type="hidden" name="rd" value="/">
    >   
    >   	<button type="submit" class="btn">Sign in with Google</button><br/>
    >   	</form>


    # The start URL passes us to Google.
    curl --head --insecure 'https://vernon.metagrid.xyz/agromulupt/start'

    >   HTTP/2 302
    >   server: nginx/1.19.1
    >   date: Tue, 25 Aug 2020 11:28:22 GMT
    >   content-type: text/html; charset=utf-8
    >   location: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force&client_id=10....76.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fvernon.metagrid.xyz%2Fagromulupt%2Fcallback&response_type=code&scope=profile+email&state=06e6ca1a3ceda49e4ab92280b7fccf15%3A%2F
    >   cache-control: no-cache, no-store, must-revalidate, max-age=0
    >   expires: Thu, 01 Jan 1970 00:00:00 UTC
    >   set-cookie: _oauth2_proxy_csrf=06e6ca1a3ceda49e4ab92280b7fccf15; Path=/; Expires=Tue, 01 Sep 2020 11:28:22 GMT; HttpOnly; Secure; SameSite
    >   strict-transport-security: max-age=15724800; includeSubDomains

    # The Google process returns us to the callbackl URL.
    # (response from the end of the OAuth sequence in Firefox)

    >   HTTP/2 302 Found
    >   content-type: text/html; charset=UTF-8
    >   x-frame-options: DENY
    >   cache-control: no-cache, no-store, max-age=0, must-revalidate
    >   pragma: no-cache
    >   expires: Mon, 01 Jan 1990 00:00:00 GMT
    >   date: Tue, 25 Aug 2020 11:36:41 GMT
    >   location: https://vernon.metagrid.xyz/agromulupt/callback?state=a86f....b474%3A%2F&code=4%2F3QFE....czGo&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&authuser=0&prompt=consent
    >   strict-transport-security: max-age=31536000; includeSubDomains
    >   content-security-policy: script-src 'nonce-qUVA3tI4bHeo7VcMfRQ0Hg' 'unsafe-inline' 'unsafe-eval';object-src 'none';base-uri 'self';report-uri /cspreport
    >   content-encoding: gzip
    >   x-content-type-options: nosniff
    >   x-xss-protection: 1; mode=block
    >   content-length: 396
    >   server: GSE
    >   set-cookie: GAPS=1:3Yuw....ygxJ;Path=/;Expires=Thu, 25-Aug-2022 11:36:41 GMT;Secure;HttpOnly;Priority=HIGH
    >   set-cookie: __Host-GAPS=1:3Yuw....ygxJ;Path=/;Expires=Thu, 25-Aug-2022 11:36:41 GMT;Secure;HttpOnly;Priority=HIGH
    >   set-cookie: SIDCC=AJi4....ZyYQ; expires=Wed, 25-Aug-2021 11:36:41 GMT; path=/; domain=.google.com; priority=high
    >   alt-svc: h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
    >   X-Firefox-Spdy: h2


    location: https://vernon.metagrid.xyz/agromulupt/callback?
        state=a86f....b474:/
        &
        code=4/3QFE....czGo
        &
        scope=
            email
            profile
            https://www.googleapis.com/auth/userinfo.profile
            https://www.googleapis.com/auth/userinfo.email
            openid
        &
        authuser=0
        &
        prompt=consent


    # The callback URL redirects to the '/' base URL.

    >   HTTP/2 302 Found
    >   server: nginx/1.19.1
    >   date: Tue, 25 Aug 2020 11:36:41 GMT
    >   content-type: text/html; charset=utf-8
    >   content-length: 24
    >   cache-control: no-cache, no-store, must-revalidate, max-age=0
    >   expires: Thu, 01 Jan 1970 00:00:00 UTC
    >   location: /
    >   set-cookie: _oauth2_proxy_csrf=; Path=/; Expires=Tue, 25 Aug 2020 10:36:41 GMT; HttpOnly; Secure; SameSite
    >   set-cookie: _oauth2_proxy=eyJB....CeEI=; Path=/; Expires=Tue, 01 Sep 2020 11:36:41 GMT; HttpOnly; Secure; SameSite
    >   strict-transport-security: max-age=15724800; includeSubDomains
    >   X-Firefox-Spdy: h2

    # The base URL, '/' returns 404 not found.


    # The callback URL redirects to the '/' base URL.
    https://vernon.metagrid.xyz/agromulupt/start?rd=https%3A%2F%2Fvernon.metagrid.xyz%2Fagromulupt%2Ffrog


    # With 'path' set to '/auth-test'
    # '/' returns a 404 NotFound response
    # '/frog' returns a 404 NotFound response
    # '/auth-test' returns a 500 ServerError response

    # With 'path' set to '/'
    # '/' returns a ServerError response
    # '/frog' returns a 500 ServerError response
    # '/auth-test' returns a 500 ServerError response



    cat > /tmp/oauth-ingress.yaml << EOF
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 annotations:
   nginx.ingress.kubernetes.io/auth-url:    "https://\$host/agromulupt/auth"
   nginx.ingress.kubernetes.io/auth-signin: "https://\$host/agromulupt/start?rd=\$escaped_request_uri"
   nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"
 name: oauth-protected
 namespace: default
spec:
 rules:
 - host: ${hostname:?}
   http:
     paths:
     - path: /
       backend:
         serviceName: http-svc
         servicePort: 80
 tls:
 - hosts:
   - ${hostname:?}
   secretName: ${certname:?}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
 name: oauth-protector
 namespace: default
spec:
 rules:
 - host: ${hostname:?}
   http:
     paths:
     - path: /agromulupt
       backend:
         serviceName: oauth-proxy
         servicePort: 4180
 tls:
 - hosts:
   - ${hostname:?}
   secretName: ${certname:?}
EOF


    kubectl apply \
        --filename /tmp/oauth-ingress.yaml


    # Lots of different attempts to debug this.
    # Always getting a 500 error for oauth-protected URLs

    # Saw a clue that suggested IPv6 DNS was an issue.
    # https://github.com/kubernetes/ingress-nginx/issues/1416#issuecomment-621381002

    # It isn't but I realised that DNS might be the issue.
    # Both kubektl and firefox are on the local network, and use the local DNS.
    # All the deployed components are in Cambridge, and so would use the external DNS.
    # I've been tweaking internal DNS, not external DNS.

    # Added external DNS entries

# -----------------------------------------------------
# -----------------------------------------------------
# Update our **EXTERNAL** DNS
#[user@dns-serer]

    aglais-003.metagrid.xyz    A       128.232.227.191
    vernon.metagrid.xyz        CNAME   aglais-003.metagrid.xyz.

    #
    # Nope, still getting 500 errors.
    #

# -----------------------------------------------------
# Found it - wrong path for auth-url
#[user@kubernator]

        ....
        apiVersion: networking.k8s.io/v1beta1
        kind: Ingress
        metadata:
         annotations:
    -      nginx.ingress.kubernetes.io/auth-url:    "https://\$host/agromulupt"
    +      nginx.ingress.kubernetes.io/auth-url:    "https://\$host/agromulupt/auth"
           nginx.ingress.kubernetes.io/auth-signin: "https://\$host/agromulupt/start?rd=\$escaped_request_uri"
           nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user, x-auth-request-email"
         name: oauth-protected
         namespace: default
        ....


    # Clue was here :
    # https://github.com/kubernetes/ingress-nginx/issues/1416#issuecomment-418704260
    # Nothing to do with IPv6, but check the auth-url setting.



# -----------------------------------------------------
# Check the age of our http-svc and oauth-proxy Pods.
#[user@kubernator]

    kubectl get pods

    >   NAME                                                         READY   STATUS    RESTARTS   AGE
    >   augusta-20200814-ingress-nginx-controller-779bf4dbc7-vffmt   1/1     Running   0          11d
    >   http-svc-7cd467b9f6-c77c4                                    1/1     Running   0          10h
    >   manila-provisioner-deployment-7775bd5d9d-db79r               1/1     Running   0          4d12h
    >   oauth-proxy-5584c649d-5ngq5                                  1/1     Running   0          9h
    >   test-pod-01                                                  1/1     Running   0          3d
    >   valeria-20200814-kubernetes-dashboard-5f5644bc46-tbqp9       2/2     Running   0          11d

    #
    # Several hours wasted on this problem.
    # The Nginx server just returned 500 ServerError, no details.
    # My original notes were OK.
    # I must have made the error when I copied them, or when debugging a differenmt part.
    # OAuth sequence all works now.
    #

# -----------------------------------------------------
# Change the path to include the root '/' directory.
#[user@kubernator]

        spec:
         rules:
         - host: ${hostname:?}
           http:
             paths:
    -        - path: /frog
    +        - path: /
               backend:
                 serviceName: http-svc
                 servicePort: 80

    # Service now works for all URLs, apart from /agromulupt/*
    # All the paths appear to be working as wildcard paths.
    # https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types

    +        - path: /
    =        - path: /**

    +        - path: /agromulupt
    =        - path: /agromulupt/**

    # The kubectl validator refuses to accept pathType param
    # Adding a pathType param causes a validation error.

             - path: /
    x          pathType: Prefix




